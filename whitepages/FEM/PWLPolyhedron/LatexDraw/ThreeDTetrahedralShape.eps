%!PS-Adobe-2.0 EPSF-1.2
%%Title: tmpPSFile
%%Creator: dvips(k) 5.998 Copyright 2018 Radical Eye Software
%%CreationDate: Fri Aug 28 12:49:52 2020
%%For:janv4 janv4
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 4 2 471 214
%%HiResBoundingBox: 4.356000 2.754000 470.717986 213.497993
%%EndComments

%%BeginProlog
%%BeginPreview: 467 212 8 2544
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000002840380000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000005008080000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000334444000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000013
% 19060000205818000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000033440055330000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000395e5e5e
% 5e520000104000000038000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000033aa1166220000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000064b5e321f19
% 191f0000203000001848000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000088dd77000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000001358581f000000
% 00000000401800081840000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000444422bb550000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000045520c00000000
% 00000000500000282050180000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000088000000880000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000c5e250000000000
% 00000808400000001060180000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000033660066220000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044ccffcc44000000000000000000000000000000000000000000000000003258060000000000
% 0000384020000000000000000000000000000044ccffcc4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0044ccffcc4400000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ccffcc44000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000035
% a1c9a135114400000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044ccffcc4400000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0022eeffffffee220000000000000000000000000000000000000000000000005839000000000000
% 00000000000000000000000000000000000022eeffffffee22000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 22eeffffffee22000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000022eeffffffee220000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000001bbc
% c9c9c9bc1b0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000022eeffffffee22000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0077ffffffffffdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbd4c9bbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbffffffffff77000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 77ffffffffffdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbffffffffff770000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000005dc9
% c9d7d0c9c2bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbffffffffff77000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0077ffffffffffdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbd4c9bebbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbffffffffff77000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 77ffffffffffdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbffffffffff800000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000005dc9
% c9ffe6c9c2bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbffffffffff77000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 007affffffffee22000000000000000000000000000000000000000000000000454c580600000000
% 00000000000000000000000000000000000022eeffffffff89000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% a7ffffffffee22000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000022eefffffffef04400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000029c9
% c9ffe2c9320000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000022eeffffffffd3220000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 66ffdae9ffcc4400000000000000000000000000000000000000000000000013545e5e1900000000
% 0000000000000000000000000000000000000044f1ffd0c1ffaa1100000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000099
% ffb4f1ffcc4400000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ccffe769ccff88000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000011ccf1
% b5ffd35200000d5d0000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044daffda82eeee5500000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000066
% ffcc1188ff0000000000334444000000000000000000000000000000000000064b5e5e3200000000
% 0000000000000000000000000000000000000000bbbb000077ffdd33000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000099ff
% 9900bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff88001199ffbb1100000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000011ccff66
% 00ff880000001b940000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ff440022ccff88000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000066ff
% cc110088ff00000000334400553300000000000000000000000000000000000006395e3f00000000
% 0000000000000000000000000000000000000000bbbb00000033ddff770000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000099ff99
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000066eeee44000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000011ccff6600
% 00ff8800000000000000356c00000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ff4400000088ffcc2200000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000066ffcc
% 11000022440000000033aa1166220000000000000000000000000000000000000000325200000000
% 000000000000000000000000000000000000000033330000444450aaffaa11000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000099ff9900
% 00003333000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000044220000000033ccff880000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000011ccff660000
% 00442200000000000000355d00000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000001144110000000055eeee55000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000066ffcc11
% 0000000000000000000088dd77000000000000000000000000000000000000000000001f00000000
% 0000000000000000000000000000000000000000000000557700882277ffdd330000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000099ff990000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000001199ffbb11000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000011ccff66000000
% 0000000000000000000000000000350d000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000022ccff880000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000066ffcc1100
% 000000000000000000444422bb550000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000088440077770033ddff7700000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000099ff99000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000066eeee440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000011ccff6600000000
% 0000000000000000000000000000bc28000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000088ffcc22000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000066ffcc110000
% 00000088ff0000000088000000880000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb006666008888000011aaffaa110000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000099ff9900000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff88000000000000000033ccff8800000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000011ccff660000000000
% 00ff8800000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ff44000000000000000055eeee550000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000066ffcc11000000
% 00000088ff0000000033660066220000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb0000664488880000000077ffdd3300000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000099ff990000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff880000000000000000001199ffbb110000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000011ccff66000000000000
% 00ff880000000000000000000000000000505d000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ff4400000000000000000022ccff8800000000000000
% 000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000066ffcc1100000000
% 00000088ff0000000000114400000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb001122008833000000000033ddff77000000
% 00000000000000000000000028403800000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000099ff99000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff88000000000000000000000066eeee4400000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000011ccff6600000000000000
% 00ff8800000000000000000000000000003535000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ff44000000000000000000000088ffcc220000000000
% 000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000066ffcc110000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb00336633880000000000000011aaffaa1100
% 00000000000000000000000050080800000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000099ff9900000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000033ccff88000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000011ccff660000000000000000
% 00ff8800000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ff4400000000000000000000000055eeee5500000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000066ffcc11000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000022220000000000000000000077ffdd33
% 00000000000000000000002058180000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000099ff990000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff88000000000000000000000000001199ffbb1100
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000011ccff66000000000000000000
% 00ff8800000000000000000000000000000000005d1b000000000000000000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000022ccff88000000
% 000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000066ffcc1100000000000000
% 00000044880000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000666600000000000000000000000000000033ddff
% 77000000000000000000001040000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000099ff99000000000000000000
% 00006666000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000884400000000000000000000000000000066eeee44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000011ccff6600000000000000000000
% 00884400000000000000000000000000000000007928000000000000000000000000000000000000
% 000000000000000000000000000000000022882200000000000000000000000000000088ffcc2200
% 000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000066ffcc110000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000011aa
% ffaa1100000000000000002030001840380800000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000099ff9900000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000033ccff
% 88000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000011ccff660000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000055eeee55
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000066ffcc11000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 77ffdd33000000000000004018002018080000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000099ff990000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000001199
% ffbb1100000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000011ccff66000000000000000000000000
% 000000000000000000000000000000000000000000001b0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000022ccff
% 880000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000066ffcc1100000000000000000000
% 00000066bb0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000008888000000000000000000000000000000000000
% 0033ddff77000000000000500000181830101f250000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000099ff99000000000000000000000000
% 00008888000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb6600000000000000000000000000000000000000
% 66eeee44000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000011ccff6600000000000000000000000000
% 00bb6600000000000000000000000000000000000000866c00000000000000000000000000000000
% 000000000000000000000000000000000033bb330000000000000000000000000000000000000088
% ffcc22000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000066ffcc110000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 000011aaffaa110000080840000020081840395e2500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000099ff9900000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0033ccff880000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000011ccff660000000000000000000000000000
% 00ff88000000000000000000000000000000000000000d1b00000000000000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 55eeee550000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000066ffcc11000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 0000000077ffdd3300384020000020103018004b5800000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000099ff990000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 00001199ffbb11000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000011ccff66000000000000000000000000000000
% 00ff8800000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 0022ccff8800000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000066ffcc1100000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 000000000033ddff7700000000000008000000135e1f000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000099ff99000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0000000066eeee440000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000011ccff6600000000000000000000000000000000
% 00ff88000000000000000000000000000000000000000000280d0000000000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 00000088ffcc220000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000066ffcc110000000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 00000000000011aaffaa110000000000000000005e32000000000000000000000000000000000000
% 00000000000000000000000000000000000000000099ff9900000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 000000000033ccff8800000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000011ccff660000000000000000000000000000000000
% 00ff88000000000000000000000000000000000000000000bc350000000000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 0000000055eeee5500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000066ffcc11000000000000000000000000000000
% 00000066bb0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000008888000000000000000000000000000000000000
% 000000000000000077ffdd3300000000000000065e1f000000000000000000000000000000000000
% 000000000000000000000000000000000000000099ff990000000000000000000000000000000000
% 00008888000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb6600000000000000000000000000000000000000
% 0000000000001199ffbb110000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000011ccff66000000000000000000000000000000000000
% 00bb6600000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000033bb330000000000000000000000000000000000000000
% 000000000022ccff88000000000000000000000000000000000000
% 000000000000000000000000000000000000000066ffcc1100000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000033ddff77000000000000325e0c000000000000000000000000000000000000
% 0000000000000000000000000000000000000099ff99000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000066eeee4400000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000011ccff6600000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000088ffcc2200000000000000000000000000000000
% 0000000000000000000000000000000000000066ffcc110000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000011aaffaa110000000c583900000000000066000000442244000000000000
% 00000000000000000000000000000000000099ff9900000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000033ccff88000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000011ccff660000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000280d00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000055eeee55000000000000000000000000000000
% 00000000000000228888886600000000000066ffcc11000000000000000000000000000000000000
% 00000044880000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000006666000000000000000000000000000000000000
% 00000000000000000000000077ffdd3300064b580c000000000044bb000033660077220000000000
% 000000000000000000000000000000000099ff990000000000000000000000000000000000000000
% 00006666000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000884400000000000000000000000000000000000000
% 000000000000000000001199ffbb1100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000011ccff66000000000000000000000000000000000000000000
% 00884400000000000000000000000000000000000000000000a15d00000000000000000000000000
% 00000000000000000000000000000000002288220000000000000000000000000000000000000000
% 00000000000000000022ccff880000000000000000000000000000
% 000000000000004477445555000000000066ffcc1100000000000000000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 0000000000000000000000000033ddff7d4b581300000000000000bb000088440044880000000000
% 0000000000000000000000000000000099ff99000000000000000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 00000000000000000000000066eeee44000000000000000000000000000000000000000000000000
% 000000000000000000000000000011ccff6600000000000000000000000000000000000000000000
% 00ff8800000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 000000000000000000000088ffcc22000000000000000000000000
% 0000000000000011000066000000000066ffcc110000000000000000000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 000000000000000000000000255223b7ffc8230000000000000000bb000088440044880000000000
% 00000000000000000000000000000099ff9900000000000000000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0000000000000000000000000033ccff880000000000000000000000000000000000000000000000
% 0000000000000000000000000011ccff660000000000000000000000000000000000000000000000
% 00ff8800000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 00000000000000000000000055eeee550000000000000000000000
% 00000000000000000066110000000066ffcc11000000000000000000000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 0000000000000000000025525e5e555e9bffdd3300000000000000bb000088440044880000000000
% 000000000000000000000000000099ff990000000000000000000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 00000000000000000000000000001199ffbb11000000000000000000000000000000000000000000
% 00000000000000000000000011ccff66000000000000000000000000000000000000000000000000
% 00ff8800000000000000000000000000000000000000000000002800000000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 0000000000000000000000000022ccff8800000000000000000000
% 000000000000000000880000000066ffcc1100000000000000000000000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 0000000000000000063f5e5e5e5e47190033ddff77000000000000bb000077440055660000000000
% 0000000000000000000000000099ff99000000000000000000000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0000000000000000000000000000000066eeee440000000000000000000000000000000000000000
% 000000000000000000000011ccff6600000000000000000000000000000000000000000000000000
% 00ff880000000000000000000000000000000000000000000000ae43000000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 00000000000000000000000000000088ffcc220000000000000000
% 000000000000000022bb00000066ffcc110000000000000000000000000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 00000000000000000000061f32453200000011aaffaa1100000044dd551111880088110000000000
% 00000000000000000000000099ff9900000000000000000000000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 000000000000000000000000000000000033ccff8800000000000000000000000000000000000000
% 0000000000000000000011ccff660000000000000000000000000000000000000000000000000000
% 00ff8800000000000000000000000000000000000000000000001b00000000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 0000000000000000000000000000000055eeee5500000000000000
% 000000000000000044bb000066ffcc11000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000028403800000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000077ffdd3300000000000000004400000000000000
% 000000000000000000000099ff990000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000001199ffbb110000000000000000000000000000000000
% 00000000000000000011ccff66000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000022ccff88000000000000
% 000000000000000044d3ffe1ffcc1100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000050080800000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000033ddff9bccffcc440000000000000000000000
% 0000000000000044ccffebff99000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000066eeee76ccffcc44000000000000000000000000
% 000000000044ccffd0daff6600000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000088ffdad3ffcc4400
% 0000000000000022eefffffffc310000000000000000000000000000000000000000000000000000
% 00000022440000000000000000000000000000000000000000000000000000000000000000000000
% 00002058180000000000000000000000000000003333000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000011b5ffffffffee2200000000000000000000
% 00000000000022eefffffff822000000000000000000000000000000000000000000000000000000
% 00003333000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000442200000000000000000000000000000000000000
% 00000000000000000000000000000000000000000033d3ffffffffee220000000000000000000000
% 0000000022eeffffffff7a0000000000000000000000000000000000000000000000000000000000
% 004422000000000000000000000000000000000000000000000035bc000000000000000000000000
% 00000000000000000000000000000000001144110000000000000000000000000000000000000000
% 00000000000000000000000000000000000000006cfeffffffee22
% 0000000000000077ffffffffff770000000000000000000000000000000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000104000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000077ffffffffff7700000000000000000000
% 00000000000077ffffffffff77000000000000000000000000000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000080ffffffffff770000000000000000000000
% 0000000077ffffffffff770000000000000000000000000000000000000000000000000000000000
% 00ff8800000000000000000000000000000000000000000000000028000000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 000000000000000000000000000000000000000077ffffffffff77
% 0000000000000077ffffffffff770000000000000000000000000000000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000203000082818000000000000000000000000bbbb000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000077ffffffffff7700000000000000000000
% 00000000000077ffffffffff77000000000000000000000000000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000077ffffffffff770000000000000000000000
% 0000000077ffffffffff800000000000000000000000000000000000000000000000000000000000
% 00ff8800000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 000000000000000000000000000000000000000077ffffffffff77
% 0000000000000022eeffffffffa71100000000000000000000000000000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000401800002020000000000000000000000000bbbb000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000004efeffffffee2200000000000000000000
% 00000000000022eeffffffff89000000000000000000000000000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000a7ffffffffee220000000000000000000000
% 0000000022eefffffffef04400000000000000000000000000000000000000000000000000000000
% 00ff8800000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 000000000000000000000000000000000000000031fcffffffee22
% 000000000000000044e7ffcca8ffcc33000000000000000000000000000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000500000002020000000000000000000000000bbbb000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000033eedadcffda440000000000000000000000
% 0000000000000044f1ffd0c1ffaa1100000000000000000000000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000099ffb4e7ffcc44000000000000000000000000
% 000000000044ccffe769ccff88000000000000000000000000000000000000000000000000000000
% 00ff8800000000000000000000000000000000000000000000000079500000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 0000000000000000000000000000000000000011ccffe1ffe74400
% 00000000000000000088ff000044eeee660000000000000000000000000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0808400000002020000000000000000000000000bbbb000000000000000000000000000000000000
% 00000000000000000000000000000000000000000033eecc1144ff44000000000000000000000000
% 0000000000000000bbbb000077ffdd33000000000000000000000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 000000000000000000000000000000000000000099ff990088ff0000000000000000000000000000
% 00000000000000ff88001199ffbb1100000000000000000000000000000000000000000000000000
% 00ff8800000000000000000000000000000000000000000000000035280000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 00000000000000000000000000000000000011ccff6600ff880000
% 00000000000000000088ff00000011bbff9911000000000000000000000000000000000000000000
% 00000022440000000000000000000000000000000000000000000000000000000000000000000000
% 38402000000838400800000000000000000000003333000000000000000000000000000000000000
% 000000000000000000000000000000000000000033eecc110044ff44000000000000000000000000
% 0000000000000000bbbb00000033ddff770000000000000000000000000000000000000000000000
% 00003333000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000442200000000000000000000000000000000000000
% 0000000000000000000000000000000000000099ff99000088ff0000000000000000000000000000
% 00000000000000ff8800000066eeee44000000000000000000000000000000000000000000000000
% 00442200000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000001144110000000000000000000000000000000000000000
% 000000000000000000000000000000000011ccff660000ff880000
% 00000000000000000088ff000000000088ffcc330000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000033eecc11000044ff44000000000000000000000000
% 0000000000000000bbbb0000000011aaffaa11000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000099ff9900000088ff0000000000000000000000000000
% 00000000000000ff880000000033ccff880000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000011ccff66000000ff880000
% 00000000000000000088ff00000000000044eeee6600000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000033eecc1100000044ff44000000000000000000000000
% 0000000000000000bbbb00000000000077ffdd330000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000099ff990000000088ff0000000000000000000000000000
% 00000000000000ff8800000000001199ffbb11000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000001b860000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000011ccff6600000000ff880000
% 00000000000000000088ff0000000000000011bbff99110000000000000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 000000000000000000000000000000000033eecc110000000044ff44000000000000000000000000
% 0000000000000000bbbb0000000000000033ddff7700000000000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0000000000000000000000000000000099ff99000000000088ff0000000000000000000000000000
% 00000000000000ff880000000000000066eeee440000000000000000000000000000000000000000
% 00ff880000000000000000000000000000000000000000000000000d5d0000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 000000000000000000000000000011ccff660000000000ff880000
% 00000000000000000088ff00000000000000000088ffcc3300000000000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 0000000000000000000000000000000033eecc11000000000044ff44000000000000000000000000
% 0000000000000000bbbb000000000000000011aaffaa110000000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 00000000000000000000000000000099ff9900000000000088ff0000000000000000000000000000
% 00000000000000ff88000000000000000033ccff8800000000000000000000000000000000000000
% 00ff8800000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 0000000000000000000000000011ccff66000000000000ff880000
% 00000000000000000088ff0000000000000000000044eeee66000000000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 00000000000000000000000000000033eecc1100000000000044ff44000000000000000000000000
% 0000000000000000bbbb0000000000000000000077ffdd3300000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 000000000000000000000000000099ff990000000000000088ff0000000000000000000000000000
% 00000000000000ff880000000000000000001199ffbb110000000000000000000000000000000000
% 00ff8800000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 00000000000000000000000011ccff6600000000000000ff880000
% 00000000000000000088ff000000000000000000000011bbff991100000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 000000000000000000000000000033eecc110000000000000044ff44000000000000000000000000
% 0000000000000000bbbb000000000000000000000033ddff77000000000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0000000000000000000000000099ff99000000000000000088ff0000000000000000000000000000
% 00000000000000ff88000000000000000000000066eeee4400000000000000000000000000000000
% 00ff8800000000000000000000000000000000000000000000000000355000000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 000000000000000000000011ccff660000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000088ffcc33000000000000000000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 0000000000000000000000000033eecc11000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb00000000000000000000000011aaffaa1100000000000000000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 00000000000000000000000099ff9900000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000033ccff88000000000000000000000000000000
% 00ff8800000000000000000000000000000000000000000000000000436c00000000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 0000000000000000000011ccff66000000000000000000ff880000
% 00000000000000000088ff000000000000000000000000000044eeee660000000000000000000000
% 00000044880000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000006666000000000000000000000000000000000000
% 00000000000000000000000033eecc1100000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb000000000000000000000000000077ffdd33000000000000000000000000
% 00006666000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000884400000000000000000000000000000000000000
% 000000000000000000000099ff990000000000000000000088ff0000000000000000000000000000
% 00000000000000ff88000000000000000000000000001199ffbb1100000000000000000000000000
% 00884400000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000002288220000000000000000000000000000000000000000
% 00000000000000000011ccff6600000000000000000000ff880000
% 0000000000000000007dbf330d0000000000000000000000000011bbff9911000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000033eecc110000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb00000000000000000000000000000033ddff770000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000099ff99000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000066eeee44000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000011ccff660000000000000000000000ff880000
% 000000000000000d465f5f5f5f46190000000000000000000000000088ffcc330000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000033eecc11000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb0000000000000000000000000000000011aaffaa11000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000099ff9900000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff880000000000000000000000000000000033ccff880000000000000000000000
% 00000000000000000000000000000000000000000000000000000000004327280000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000011ccff66000000000000000000000000ff880000
% 0000000000000659597aff0626525f330000000000000000000000000044eeee6600000000000000
% 00000066bb0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000008888000000000000000000000000000000000000
% 00000000000000000033eecc1100000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb00000000000000000000000000000000000077ffdd330000000000000000
% 00008888000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb6600000000000000000000000000000000000000
% 000000000000000099ff990000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000001199ffbb11000000000000000000
% 00bb660000000000000000000000000000000000000000000000000086c4c9940000000000000000
% 000000000000000000000000000000000033bb330000000000000000000000000000000000000000
% 00000000000011ccff6600000000000000000000000000ff880000
% 000000000000395f1388ff000000395f3f0613000000000000000000000011aaff99110000000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 000000000000000033eecc110000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb0000000000000000000000000000000000000033ddff7700000000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0000000000000099ff99000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff880000000000000000000000000000000000000066eeee440000000000000000
% 00ff88000000000000000000000000000000000000000000000000006cc9c9860000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 000000000011ccff660000000000000000000000000000ff880000
% 0000000000135f330088ff00000000265f475f0d00000000000000000000000088ffcc3300000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 0000000000000033eecc11000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb000000000000000000000000000000000000000011aaffaa110000000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 00000000000099ff9900000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff88000000000000000000000000000000000000000033ccff8800000000000000
% 00ff88000000000000000000000000000000000000000000000000000dbcc96c0000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 0000000011ccff66000000000000000000000000000000ff880000
% 00000000003359060088ff0000000000465f5f330000000000000000000000000044eeee66000000
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 00000000000033eecc1100000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb0000000000000000000000000000000000000000000077ffdd3300000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 000000000099ff990000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff880000000000000000000000000000000000000000001199ffbb110000000000
% 00ff88000000000000000000000000000000000000000000000000000043c9500000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 00000011ccff6600000000000000000000000000000000ff880000
% 00000000005239000088ff000000000d525f5f59000000000000000000000000000011aaff991100
% 00000088ff0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 000000000033eecc110000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb000000000000000000000000000000000000000000000033ddff77000000
% 0000bbbb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0000000099ff99000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff88000000000000000000000000000000000000000000000066eeee4400000000
% 00ff8800000000000000000000000000000000000000000000000000000086350000000000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 000011ccff660000000000000000000000000000000000ff880000
% 00000000135f20000088ff00000000000026525f2600000000000000000000000000000077ffcc33
% 00000066bb0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000008888000000000000000000000000000000000000
% 0044ccffd6f3cc11000000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb00000000000000000000000000000000000000000000000011aaffaa1100
% 000088880000000000000000000000000000000000000000722d0000000000000000000000000000
% 00000000000000000000000000000000000000bb6600000000000000000000000000000000000000
% 44ccffebff9900000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000033ccff88000000
% 00bb660000000000000000000000000000000000000000000000000000001b1b0000000000000000
% 000000000000000000000000000000000033bb330000000000000000000000000000000000000044
% ccfff5ff66000000000000000000000000000000000000ff880000
% 00000000265f06000088ff0000000000000000263f0000000000000000000000000000000033ddee
% 66000000000000000000000000000000000000000000000000000000000000002e5c2e0000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 22eefffffffc3100000000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb000000000000000000000000000000000000000000000000000077ffdd33
% 000000000000000000000022000000670b00005c22000057abab89440000002e5c2e000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000022
% eefffffff82200000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff88000000000000000000000000000000000000000000000000001199ffbb1100
% 0000000000000000000000000000000000000000000000000000000000002e5c2e00000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000022ee
% fffffff522000000000000000000000000000000000000ff880000
% 00000000335200000088ff00000000000000000000000000000000000000000000000000000011aa
% ff99110000000000000000000000000000001155441100000000000000002e95acacac952e000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000114477
% bfffffffffff7700000066000000006600000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb00000000000000000000000000000000000000000000000000000033ddff
% 7700000000000b4f000022a0170000670b00004f22000092abababab893695acacac952e00000000
% 000000000000000000000000000000000000000000000000000000000000000000000000224488c8
% ffffffffff7700000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000066eeee44
% 000000000000000000000000000000000000000000000000000000002e95acacac952e0000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000335588d2ff
% ffffffff77000000000000000000000000000000000000ff880000
% 000000003f4600000088ff0000000000000000000000000000000000000000000000000000000000
% 77ffcc698800000000000000000000000000880088330000000000000017a1acacacacaca1170000
% 0000000000000000000000000000000000000000666600000000000000000011447788bbeeffffff
% e4ffffffffff77000044bb00000044bb00000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb0000000000000000000000000000000000000000000000000000000011aa
% ffaa78860000177200000000000000000000000000000039a0724f2217a1acacacacaca117000000
% 00000000000000000000000000000000000000884400000000000000000022448899bbffffffffdb
% ffffffffff7700000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff880000000000000000000000000000000000000000000000000000000033ccff
% 88884400000000000000000000000000000000000000000000000017a1acacacacaca11700000000
% 0000000000000000000000000000000000228822000000000000000000335588aaccffffffeedbff
% ffffffff77000000000000000000000000000000000000ff880000
% 00000000464600000088ff0000000000000000000000000000000000000000000000000000000000
% 0033ddf7ff00000000000000000000000066664411000000000000000067acacacacacacac670000
% 0000000000000000000000000000000000000000bbbb00000011447788bbeeffffffccaa88553300
% 22eeffffffee22000000bb00000000bb00000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb000000000000000000000000000000000000000000000000000000000000
% 77ffecb700000000000000000000000000000000000000170000000067acacacacacacac67000000
% 00000000000000000000000000000000000000ff8800000022448899bbffffffffbb998844220022
% eeffffffee2200000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000001199
% ffff9000000000000000000000000000000000000000000000000067acacacacacacac6700000000
% 000000000000000000000000000000000044ff44000000335588aaccffffffeebb887744110022ee
% ffffffee22000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000000000
% 000011d7ff99110000000000000000000088880099220000000000000095acacb7b7acacac950000
% 0000000000000000000000000000000000000011cddb88bbeeffffffccaa88553300000000000000
% 0044ccffe74400000000bb00000000bb00000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb00000000000000000000000000000000000000000000000000000000007e
% 1733f6ff77000000000000000000000000000000000000000000000095acacc2acacacac95000000
% 00000000000000000000000000000000000022ffc899bbffffffffbb998844220000000000000000
% 44daffda440000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 66fff744000000000000000000000000000000000000000000000095acacc2acacacac9500000000
% 000000000000000000000000000000000069ffa8aaccffffffeebb88774411000000000000000044
% e7ffcc4400000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000000000
% 00000088ffffcc3300000000000000000088550055880000000000000095acacc8e9acacac950000
% 0000000000000000000000000011447788bbeeffffffccaa88553300000000000000000000000000
% 000000ff880000000000bb00000000bb00000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb000000000000000000000000000000000000000000000000000000000b5c
% 0000c0e8ffaa1100000000000000000000000000000000000000000095acacded8acacac95000000
% 00000000000000000000000022448899bbffffffffbb998844220000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00ffe7ff880000000000000000000000000000000000000000000095acacf4c2acacac9500000000
% 0000000000000000000000335588aaccfffffff3bb88774411000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000028403800000088ff0000000000000000000000000000000000000000000000000000000000
% 00000088ff33ddee66000000000000000066660066880000000000000067acacd8f9acacac670000
% 0000000000000011447788bbeeffffffccaa8855c9bb000000000000000000000000000000000000
% 000000ff880000000000bb00000000bb00000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb000000000000000000000000000000000000000000000000007e44000000
% 0000bbbb77ffdd33000000000000000000000000000000000000000067acaceedeacacac67000000
% 00000000000022448899bbffffffffbb998844ff8800000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00ff9099ffbb11000000000000000000000000000000000000000067acb2ffcdacacac6700000000
% 0000000000335588aaccffffffeebb887776ff440000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000050080800000088ff0000000000000000000000000000000000000000000000000000000000
% 00000088ff0011aaff991100000000000011882288110000000000000017a1ace9e99c91a1170000
% 0011447788bbeeffffffccaa8855330000000000bbbb000000000000000000000000000000000000
% 000000ff880000000044dd55110044dd55110000000000000044ff44000000000000000000000000
% 0000000000000000bbbb00000000000000000000000000000000000000000000000000220b000000
% 0000bbbb0033ddff770000000000000000000000000000000000000017a1acffd8acaca117000000
% 22448899bbffffffffbb998844220000000000ff8800000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00ff880066eeee440000000000000000000000000000000000000017a1c2ffbfbaafa11700000033
% 5588aaccffffffeebb887744110000000044ff440000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00002058180000000088ff0000000000000000000000000000000000000000000000000000000000
% 000000000000000077ffcc330000000000000044000000000000000000002e95f9d8867f607788bb
% eeffffffccaa88553300000000000000000000000000000000000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb000000000000000000000000000000000000000000002d0b000000000000
% 00000000000011aaffaa110000000000000000000000000000000000002eaaffc2afbf608899bbff
% ffffffbb998844220000000000000000000000000000000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 000000000033ccff88000000000000000000000000000000000000002eceffc2d6c66c88aaccffff
% ffeebb88774411000000000000000000000000000000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00001040000820380888ff0000000000000000000000000000000000000000000000000000000000
% 00000000000000000033ddee6600000000000000000000000000000000114489ffcca45bffffccaa
% 88553300000000000000000000000000000000000000000000000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb00000000000000000000000000000000000000000000ab2d000000000000
% 000000000000000077ffdd33000000000000000000000000000000002244b7ffb8c1c1ffffbb9988
% 44220000000000000000000000000000000000000000000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 0000000000001199ffbb11000000000000000000000000000000003355d0eecdd6ecffeebb887744
% 11000000000000000000000000000000000000000000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00002030002810282888ff0000000000000000000000000000000000000000000000000000000000
% 0000002244000000000011aaffb4d0ffcc44000000000011447788bbeeffffffffb5b35bdd110000
% 00000000000000000000000000000000000000003333000000000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44000000284038000000000000
% 0000000000000000bbbb000000000000000000000000000000000000000000000000000000000000
% 00003333000000000033ddff9bccffcc44000000000022448899bbfffffffff699d2b5c400000000
% 00000000000000000000000000000000000000442200000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 004422000000000066eeee76ccffcc440000000000335588aaccfffffffae4a8dee9900000000000
% 00000000000000000000000000000000001144110000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00004018000010480888ff0000000000000000000000000000000000000000000000000000000000
% 00000088ff0000000000000089ffffffffef5d7788bbeeffffffccaa885533000000a85bc7aa0000
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44000000500808000000000000
% 0000000000000000bbbb000000000000000000000000000000000000005c00000000000000000000
% 0000bbbb00000000000011b5fffffffff05d8899bbffffffffbb99884422000000d8abff77000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00ff8800000000000033d3fffffffff16c88aaccffffffeebb88774411000044e4caff3300000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00005000001000204088ff0000000000000000000000000000000000000000000000000000000000
% 00000088ff0000000000000077ffffffffffffffccaa885533000000000000000000bb5b68ff5500
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44000020581800000000000000
% 0000000000000000bbbb000000000000000000000000000000000000177e00000000000000000000
% 0000bbbb0000000000000077ffffffffffffffbb99884422000000000000000000e9abaaee220000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00ff880000000000000080ffffffffffffeebb88774411000000000000000044e9cdddcc00000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 08084000003018382888ff0000000000000000000000000000000000000000000000000000000000
% 00000088ff0000000000000077ffffffffff92000000000000000000000000552200335337661100
% 0000000000000000000000000000000000000000bbbb000000000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44000010400018281800000000
% 0000000000000000bbbb000000000000000000000000000000000000000000000000000000000000
% 0000bbbb0000000000000077ffffffffff890000000000000000000000224411004bab4e66000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00ff880000000000000077ffffffffff8000000000000000000000003344001174d63e4400000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 38402000000008080088ff0000000000000000000000000000000000000000000000000000000000
% 00000088ff0000000000000022eeffffffee22000000000000000000000011ff6600003d43000000
% 0000000000000000000000000000000044335500bbbb000000000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44000020302820101800000000
% 0000000000000000bbbb000000000000000000000000000000001717000000000000000000000000
% 0000bbbb0000000000000022eeffffffee22000000000000000000000066ff110000a05c00000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00ff880000000000000022eeffffffee22000000000000000000000099cc00002bd6390000000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000000000
% 00000088ff000000000000000044ccffe74400000000000000000000000044ff330000315b000088
% 550000000000000000000000000000338800bb33bbbb000000000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44000040184028301800000000
% 0000000000000000bbbb00000000000000000000000000000000725c000000000000000000000000
% 0000bbbb000000000000000044daffda4400000000000000000000000088dd0000007e7e00119922
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00ff88000000000000000044e7ffcc44000000000000000000000000cc99000000d6630033990000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000000000
% 000000224400000000000000000000ff880000000000000000000000000088ff0000bb9b5b0c00bb
% ee1100000000000000000000000000112200bb223333000000000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44000050004000004000000000
% 0000000000000000bbbb000000000000000000000000000000000000000000000000000000000000
% 0000333300000000000000000044ff4400000000000000000000000000bbbb0000ff9b940022eebb
% 00000000000000000000000000000000000000442200000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00442200000000000000000088ff0000000000000000000000000000ff770044ffb9730055ff8800
% 00000000000000000000000000000000001144110000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000444455
% 000000000000000000000000000000ff8800000000000000000000000000aabb000088a85b180033
% ffaa0000000000000000000000000000116677000000000000000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44080840001830282800000000
% 0000000000000000bbbb000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000044ff4400000000000000000000000000ee880000ff98ab000077ff
% 66000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff0000000000000000000000000044ff440044ffa69d0000aaee22
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000066330099
% 440000000000000000000000000000ff8800000000000000000000000000cc88000088bb5b310000
% 88ff5500000000000000000000000000000099550000000000000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44384020000008080000000000
% 0000000000000000bbbb00000000000000000000000000227e000000000000000000000000000000
% 0000000000000000000000000044ff4400000000000000000000000011ff550000bb91ab2d0000bb
% ee110000000000000000000000000000000000000000000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff0000000000000000000000000055ff110044ff92c8000011eebb
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000055550088
% 77000088ff00000000000000000000ff88000000000000000000000000000000000088bb49370000
% 00cccc0000000000000000000000007777008888bbbb000000000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff440d2000000000000000000000
% 0000000000000000bbbb000000000000000000000000000044000000000000000000000000000000
% 0000bbbb00000000000000000044ff440000000000000000000000000000000000bb8aab44000022
% ee880000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00ff8800000000000000000088ff000000000000000000000000000000000000ff74d60e000055ff
% 550000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff00000000000000000000000000000000000000000000000000000000aa
% 22000088ff00000000000000000000ff88000000000000000000000000000000000088bb3d430000
% 002211000000000000000000000000445511bb22bbbb000000000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44335f26000000000000000000
% 0000000000000000bbbb000000000000000000000000000000000000000000000000000000000000
% 0000bbbb00000000000000000044ff440000000000000000000000000000000000bb88a05c000000
% 33000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00ff8800000000000000000088ff000000000000000000000000000000000000ff61d63900000033
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000006633
% 00000088ff00000000000000000000ff8800000000000000000000000044440000004466315b0000
% 0000000000000000000000000000000011440000bbbb000000000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff4400395f0d0000000000000000
% 0000000000000000bbbb00000000000000000000000b220000000000000000000000000000000000
% 0000bbbb00000000000000000044ff44000000000000000000000000552200000066447e7e000000
% 00000000000000000000000000000000000000ff8800000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00ff8800000000000000000088ff0000000000000000000000000066110000008822d66300000000
% 000000000000000000000000000000000044ff440000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000553300
% 330044e7ffcc440000000000000000ff88000000000000000000000000aabb00000000001e5b0c00
% 00000055cc110000000000000000000000000044f1ffcc4400000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff4400065f2c0000000000000000
% 0000000000000000bbbb00000000000000000000002da00000000000000000000000000000000000
% 0044f1ffcc440000000000000044ff44000000000000000000000000ee8800000000005c94000000
% 000088aa0000000000000000000000000044ccffe744000000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000044
% ccffe744000000000000000088ff00000000000000000000000033ff440000000000ab7300000000
% 00bb770000000000000000000000000044daffda4400000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000055ddbbbb
% 4422eefffffff79888220000888888ffc8000022888888886600004488e7c888440000667f5b7c88
% 220000a0ffc88888000022888888886600005df7ffffffee22000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44000046460000000000000000
% 0000000000000000bbbb000000000000000000000000000000000000000000000000000000000000
% 22eefffffff798880000228888a8ff8f000044888888884400006698ffb0882200008898ab888800
% 0022bfffb0886600004488888888440022f5ffffffee220000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff88000000000000000000000000000000000000000000000000000000000022ee
% fffffff79888660000448888c8ff440000668888888822000088b7ff908800002288bcc188660000
% 44d7f798884400006688888888220022f7ffffffee22000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000000000
% 0077ffffffffffffff440000ffffffffff000044ffffffffbb000088ffffffff880066dfff5ba7ff
% 440000ffffffffff000044ffffffffbb0000c0ffffffffff77000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff4400004c330000000000000000
% 0000000000000000bbbb000000000000000000000000000000000000000000000000000000000000
% 77ffffffffffffff000044ffffffffcd000088ffffffff880000bbffffffff440088ffe9abe9ff00
% 0044ffffffffbb000088ffffffff880077ffffffffff770000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff88000000000000000000000000000000000000000000000000000000000077ff
% ffffffffffffbb000088ffffffff880000bbffffffff440000ffffffffff0000cdffe9d9ffbb0000
% 88ffffffff880000bbffffffff440077ffffffffff77000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000000000
% 0080ffffffffff7700000000000000ff88000000000000000000000044ff4400000088bb00493700
% 0000000000ccdd110000000000000000000077ffffffffff77000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44000d5f2c0000000000000000
% 0000000000000000bbbb0000000000000000000b5c00000000000000000000000000000000000000
% 92ffffffffff7700000000000044ff44000000000000000000000088ff00000000bb880bab440000
% 00000022eeaa0000000000000000000077ffffffffff890000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff88000000000000000000000000000000000000000000000000000000000077ff
% ffffffff770000000000000088ff000000000000000000000000bbaa00000000ff4447d60e000000
% 000066ff770000000000000000000077ffffffffff77000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000000000
% 11d3feffffffee2200000000000000ff88000000000000000000000066ff0000000088bb003d4300
% 000000000033ee440000000000000000000022eeffffffee22000000000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44003959060000000000000000
% 0000000000000000bbbb0000000000000000000b7217000000000000000000000000000000000033
% f0fcffffffee2200000000000044ff44000000000000000000000099bb00000000bb8800a05c0000
% 0000000088dd1100000000000000000022eefffffff1220000000000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000007aff
% ffffffee220000000000000088ff000000000000000000000000ee8800000000ff442bd639000000
% 000000bbaa0000000000000000000022eeffffffef22000000000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000000000
% bbee69ccffcc440000000000000000ff88000000000000000000000000000000000088ee00315b00
% 0000000000001100000000000000000000000044ccffcc4411dd8800000000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff44265f33000000000000000000
% 0000000000000000bbbb0000000000000000000000000000000000000000000000000000000011ee
% cc50ccffcc440000000000000044ff440000000000000000000000000000000000bb88007e7e0000
% 000000000011000000000000000000000044ccffcc440033ee660000000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff880000000000000000000000000000000000000000000000000000000055ffb4
% ccffcc44000000000000000088ff000000000000000000000000000000000000ff4400d663000000
% 0000001100000000000000000000000044ccffcc440077dd33000000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000000000
% 333300000000000000000000000000ff88000000000000000000000000000000000088ff001e5b0c
% 0000000000000000111100000000000000000000000000000088ffcc220000000000000000000000
% 000000ff88000000000000000000000000000000000000000044ff49594600000000000000000000
% 0000000000000000bbbb000000000000000000000000000000000000000000000000000000000055
% 1100000000000000000000000044ff440000000000000000000000000000000000bbbb005c940000
% 000000000000001100000000000000000000000000000011bbff9911000000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000117700
% 00000000000000000000000088ff000000000000000000000000000000000000ff4400ab73000000
% 0000000000001100000000000000000000000000000033ddff770000000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000110000
% 000000000000000000000000000000ff88000000000000000000000066110000000066bb00125b18
% 0000000000000000ee880000000000000000000000000000000055eeee5500000000000000000000
% 000000ff88000000000000000000000000000000000000191944bf5f4c0600000000000000000000
% 0000000000000000bbbb00000000000000007e220000000000000000000000000000000011000000
% 0000000000000000000000000044ff4400000000000000000000225500000000008888004fab0000
% 00000000000033ff440000000000000000000000000000000088ffcc330000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000001100000000
% 00000000000000000000000088ff000000000000000000000044330000000000bb66008f9d000000
% 000000000088ee1100000000000000000000000000000011aaffaa00000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000011cc8800
% 000000000000000000000000000000ff880000000000000000000044ff4400000000000000005b31
% 000000000000000088ff330000000000000000000000000000000022cc5500000000000000000000
% 000000ff88000000000000000000000000000000062c525f3f585f58060000000000000000000000
% 0000000000000000bbbb00000000000000004f0b00000000000000000000000000000033ee550000
% 0000000000000000000000000044ff440000000000000000000088ff00000000000000002dab2d00
% 00000000000000ccdd110000000000000000000000000000000044dd220000000000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff880000000000000000000000000000000000000000000000000066ee22000000
% 00000000000000000000000088ff0000000000000000000000bbbb000000000000000073c8000000
% 000000000022eeaa000000000000000000000000000000000077bb00000000000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff00000000000000000000000000000000000000000000000011ccee3300
% 000000000000000000000000000000ff880000000000000000000077ff0000000000000000004937
% 000000000000000011ddcc0000000000000000000000000000000000000000332200000000000000
% 000000ff880000000000000000000000000000335f5f5f5f535bbf44000000000000000000000000
% 0000000000000000bbbb00000000000000000000000000000000000000000000000033eecc110000
% 0000000000000000000000000044ff4400000000000000000000aabb00000000000000000bab4400
% 0000000000000033ff88000000000000000000000000000000000000000044110000000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000066ff9900000000
% 00000000000000000000000088ff0000000000000000000000ee88000000000000000047d60e0000
% 00000000000077ff5500000000000000000000000000000000000000005500000000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff000000000000000000000000000000000000000000000011ccee330000
% 000000000000000000000000000000ff880000000000000000000099cc0000000000224400003d43
% 00000000000000000044ff8800000000000000000000000000000000000000ddee55000000000000
% 000000ff880000000000000000000000000000001333525f3c44ff44000000000000000000000000
% 0000000000000000bbbb000000000000000000000000000000000000000000000033eecc11000000
% 0000000000000000000000000044ff4400000000000000000000dd88000000000033330000a05c00
% 000000000000000088ff4400000000000000000000000000000000000022ffcc3300000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff88000000000000000000000000000000000000000000000066ff990000000000
% 00000000000000000000000088ff0000000000000000000022ff5500000000004422002bd6390000
% 00000000000000bbee1100000000000000000000000000000000000066ffaa110000000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000ccee33000000
% 000000000000000000000000000000ff8800000000000000000000bbaa000000000088ff0000315b
% 0000000000000000000088880000000000000000000000000000000000000022ccff880000000000
% 000000ff88000000000000000000000000000000000000131944ff44000000000000000000000000
% 0000000000000000bbbb000000000000447e000000000000000000000000000022eecc1100000000
% 0000000000000000000000000044ff4400000000000000000011ff660000000000bbbb00007e7e00
% 000000000000000000bb440000000000000000000000000000000000000044eeee66000000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff880000000000000000000000000000000000000000000055ff99000000000000
% 00000000000000000000000088ff0000000000000000000055ff220000000000ff880000d6630000
% 0000000000000022bb220000000000000000000000000000000000000077ffdd3300000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000553300000000
% 000000000000000000000000000000ff8800000000000000000000dd88000000000088ff00001e5b
% 0c000000000000000000000000000000000000000000000000000000000000000088ffaa00000000
% 000000ff88000000000000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb000000000000172d00000000000000000000000000000077110000000000
% 0000000000000000000000000044ff4400000000000000000033ee330000000000bbbb00005c9400
% 0000000000000000000000000000000000000000000000000000000000000011bbff770000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000117700000000000000
% 00000000000000000000000088ff0000000000000000000077ee000000000000ff880000ab730000
% 00000000000000000000000000000000000000000000000000000000000033ddff33000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000110000000000000000
% 000000000000000000000000000000ff88000000000000000000000000000000000088ff0000125b
% 18000000000000000000000011440000000000000000000000000000000000000000553300000000
% 000000ff88000000000000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb000000000000000000000000000000000000000011000000000000000000
% 0000000000000000000000000044ff440000000000000000000000000000000000bbbb00004fab00
% 00000000000000000000002233000000000000000000000000000000000000000077110000000000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000001100000000000000000000
% 00000000000000000000000088ff000000000000000000000000000000000000ff8800008f9d0000
% 00000000000000000000441100000000000000000000000000000000000000117700000000000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000011cc8800000000000000
% 000000000000000000000000000000ff88000000000000000000000000000000000088ff0000005b
% 31000000000000000000000088ff3300000000000000000000000000000000000000000000558800
% 000000ff88000000000000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb0000000000000000000000000000000000000033ee550000000000000000
% 0000000000000000000000000044ff440000000000000000000000000000000000bbbb00002dab2d
% 0033996600117777000000bbdd110000000000000000000000000000000000000000000088660000
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff880000000000000000000000000000000000000066ee22000000000000000000
% 00000000000000000000000088ff000000000000000000000000000000000000ff88000073c80000
% 00000000000000000011ffaa0000000000000000000000000000000000000000000000aa33000000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff00000000000000000000000000000000000011ccee3300000000000000
% 000000000000000000000000000000ff88000000000000000000553300000000000088ff00000049
% 37000000000000000000000011ddcc0000000000000000000000000000000000000000000088ffcc
% 220000ff88000000000000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb0000000000724f000000000000000000000033eecc110000000000000000
% 0000000000000000000000000044ff440000000000000000006622000000000000bbbb00000bab44
% 000088bb2200440000000044ff8800000000000000000000000000000000000000000000bbff9911
% 0044ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000066ff9900000000000000000000
% 00000000000000000000000088ff000000000000000000116611000000000000ff88000047d60e00
% 0000000000000000000088ff5500000000000000000000000000000000000000000022ddff770000
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff000000000000000000000000000000000011ccee330000000000000000
% 000000000000000000000000000000ff88000000000000000000bbaa00000000000000000000003d
% 4300000000000000000000000044ff880000000000000000000000000000000000000000000055ee
% ee5500ff88000000000000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb0000000000220b0000000000000000000033eecc11000000000000000000
% 0000000000000000000000000044ff44000000000000000000ff770000000000000000000000a05c
% 00008833bb0044000000000088ff440000000000000000000000000000000000000000000088ffcc
% 3344ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff88000000000000000000000000000000000066ff990000000000000000000000
% 00000000000000000000000088ff00000000000000000044ff33000000000000000000002bd63900
% 0000000000000000000000ccee1100000000000000000000000000000000000000000011aaffaa11
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000ccee33000000000000000000
% 000000000000000000000000000000ff88000000000000000000ff88000000000000000000000031
% 5b00000000000000000000000000aaff220000000000000000000000000000000000000000000022
% ccdd00ff88000000000000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb0000000000000000000000000000000022eecc1100000000000000000000
% 0000000000000000000000000044ff44000000000000000044ff4400000000000000000000007e7e
% 00008800887744000000000011dddd000000000000000000000000000000000000000000000044ee
% 9944ff44000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff880000000000000000000000000000000055ff99000000000000000000000000
% 00000000000000000000000088ff00000000000000000088ff000000000000000000000000d66300
% 339966001177770000000033ff88000000000000000000000000000000000000000000000077ff66
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000663300000000000000000000
% 000000000000000000000000000000ff88000000000000000033ff4400000000000000000000001e
% 5b0c0000000000000000000000001199110000000000000000000000000000000000000000000000
% 002200ff98000000000000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb000000000000000000000000000000000088110000000000000000000000
% 0000000000000000000000000044ff44000000000000000077ff0000000000000000000000005c94
% 0000880000cc77000000000000447700000000000000000000000000000000000000000000000011
% 1144ff50000000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000118800000000000000000000000000
% 00000000000000000000000088ff000000000000000000aabb000000000000000000000000ab7300
% 0088bb22004400000000000077440000000000000000000000000000000000000000000000002200
% 88ff000000000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000ff88000000000000000066ff1100000000000044ff00000012
% 5b180000003399660011777700000000000000000000000000000000000000000000000000000000
% 000000fff7550000000000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb00000017ab17000000000000000000000000000000000000000000000000
% 0000000000000000000000000044ff44000000000000000099cc0000000000000088bb0000004fab
% 000088000033ee000011774455000000000000000000000000000000000000000000000000000000
% 0044ffda330000000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff000000000000000000dd8800000000000000bb880000008f9d00
% 008833bb004400000000000000000000000000000000000000000000000000000000000000000000
% 88ffaa1100000000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000011cc8800000000000000000000000000
% 000000000000000000000000000000ff88000000000000000066ee0000000000000044ff00000000
% 5b310000000088bb2200440000000000008822000000000000000000000000000000000000000000
% 000000ffe7ff8800000000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb0000000022000000000000000033ee550000000000000000000000000000
% 0000000000000000000000000044ff44000000000000000099990000000000000088bb0000002dab
% 2d44bb44000088000088220000000011880000000000000000000000000000000000000000000000
% 0044fff3ee6600000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff880000000000000000000000000066ee22000000000000000000000000000000
% 00000000000000000000000088ff000000000000000000dd6600000000000000bb8800000073c800
% 00880088774400000000000000003377000000000000000000000000000000000000000000000000
% 88ffffdd33000000000000000000000000000000000000ff880000
% 00000000000000000088ff00000000000000000000000011ccee3300000000000000000000000000
% 000000000000000000284038000000ff88000000000000000000000000000000000044ff00000000
% 4937000000008833bb0044000000000011eebb000000000000000000000000000000000000000000
% 000000ff8888ffcc110000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb00000000000000000000000033eecc110000000000000000000000000000
% 0000000000000000000000000044ff44000000000000000000000000000000000088bb0000000bab
% 44000000000000000055554433000044ff8800000000000000000000000000000000000000000000
% 0044ff50bbff99000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000066ff9900000000000000000000000000000000
% 00000000000000000000000088ff000000000000000000000000000000000000bb8800000047d60e
% 00880000cc77000000000000000088ff440000000000000000000000000000000000000000000000
% 88ff33ddff660000000000000000000000000000000000ff880000
% 00000000000000000088ff000000000000000000000011ccee330000000000000000000000000000
% 000000000000000000500808000000ff88000000000000000000000000000000000044ff00000000
% 3d4300000000880088774400000000000055ff770000000000000000000000000000000000000000
% 000000ff880055bb110000000000000000000000000000000044ff44000000000000000000000000
% 0000000000000000bbbb000000000000000000000033eecc11000000000000000000000000000000
% 0000000000000000000000000044ff44000000000000000000000000000000000088bb00000000a0
% 5c00000000000000000000000000000088ff33000000000000000000000000000000000000000000
% 0044ff44008899000000000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff88000000000000000000000066ff990000000000000000000000000000000000
% 00000000000000000000000088ff000000000000000000000000000000000000bb880000002bd639
% 0088000033ee001177445500000000ccdd1100000000000000000000000000000000000000000000
% 88ff0011aa660000000000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000ccee33000000000000000000000000000000
% 000000000000000020581800000000ff88000000000000002277110000000000000044ff00000000
% 315b00000000880000cc7700000000000000aaee2200000000000000000000000000000000000000
% 000000ff88000000000066000000000000000000000000770044ff44000000000000000000000000
% 0000000000000000bbbb000044a000000000000022eecc110000000000000000000000005c390000
% 5c670000395c00000b2200000044ff44000000000000004466000000000000000088bb000000007e
% 7e00000000000000000000000000000011ddcc000000000000000000000000000000000000000000
% 0044ff44000000001155000000000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff880000000000000000000055ff99000000000000000000000000000000000000
% 00000000000000000000000088ff000000000000000066440000000000000000bb8800000000d663
% 44bb4400008800882200000000000033ff8800000000000000000000000000000000000000000000
% 88ff000000000033330000000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000883300000000000000000000000000000000
% 000000000000000010400008282808ff880000000000000055ff2200000000000000228800000000
% 265b3718000088000033ee0000000000000011eeaa00000000000000000000000000000000000000
% 000000ff880000000033ffcc2200000000000000000055bb0044ff44000000000000000000000000
% 0000000000000000bbbb00000b220000000000001199110000000000000000005c39000044390000
% 1717000022390000448900000052ff440000000000000088dd00000000000000004466000000006b
% 9c5c17000000000000000000000000000044ff770000000000000000000000000000000000000000
% 0044ff440000000077ff991100000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000338800000000000000000000000000000000000000
% 00000000000000000000000088ff0000000000000000cc990000000000000000664400000000b79a
% 7300000000000055554433000000000088ff33000000000000000000000000000000000000000000
% 88ff0000000000bbff7700000000000000000000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000000000
% 000000000000000020300038080838ff880000000000000088ee0000000000000000000000000024
% 5b5b5b180044bb440000880000117744550000442200000000000000000000000000000000000000
% 000000ff88000000000055eeee55000000000000002233bb0044ff44000000000000000000000000
% 0000000000000000bbbb0000000000000000000000000000000000002d3900003922000000000000
% 0000000000000000000000004f90ff4400000000000000bbaa0000000000000000000000000067ab
% abab0000000000000000000000000000000055110000000000000000000000000000000000000000
% 0044ff44000000000088ffcc33000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff0000000000000000ff7700000000000000000000000000bad6d6
% 9d000000000000000000000000000000116600000000000000000000000000000000000000000000
% 88ff000000000011aaffaa110000000000000000000000ff880000
% 00000000000000000088ff0000000000000011cc6600000000000000000000000000000000000000
% 000000000000000040180050000040ff8800000000000000bbbb0000000000000000000000000000
% 4f5b5b0c000000000000000000882200000000000000000000000000000000000000000000000000
% 000000ff8800000000000022ccff550000000000004400bb0044ff44000000000000000000000000
% 0000000000000000bbbb0000000000000033dd3300000000000000004f4400000000000000000000
% 0000000000000000000000000b4bff4444670000000000ff880000000000000000000000000017ab
% ab890000000000000000000000000000000000000000000000000000000000000000000000000000
% 0044ff4400000000000044eeee220000000000000000000088ff0000000000000000000000000000
% 00000000000000ff880000000000000066cc11000000000000000000000000000000000000000000
% 00000000000000000000000088ff0000000000000044ff440000000000000000000000000055d6d6
% 73000000000000000000000000000000000000000000000000000000000000000000000000000000
% 88ff0000000000000077ffcc0000000000000000000000ff880000
% 00000000000000000088ff00000000000011ccee3300000000000000000000000000000000000000
% 000000000000000050000040000040ff8800000000000000ee88000000000000000033bb33000000
% 185b5500000000000000000000555544330000000055990000000000000000000000000000000000
% 000000ff88000000000000000077000000000000331100bb0044ff44000000000000000000000000
% 0000000000000000bbbb00449400000033eecc11000000004f720000000000000000000000000000
% 0000000000000000000000000044ff44222d00000b0b33ff44000000000000000066aa000000005c
% ab720000000000000000000000000000000000008877000000000000000000000000000000000000
% 0044ff44000000000000001166000000000000000000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000066ff9900000000000000000000000000000000000000000000
% 00000000000000000000000088ff0000000000000077ff000000000000000000886600000000abd6
% 63000000000000000000000000000000000011aa4400000000000000000000000000000000000000
% 88ff000000000000000033440000000000000000000000ff880000
% 00000000000000000088ff000000000011ccee330000000000000000000000000000000000000000
% 000000000000080840000020282820ff8800000000000000dd55000000000000000044ff44000000
% 00434300000000000000000000000000000000000077ff7700000000000000000000000000000000
% 000000ff88000000000000000000000099550000334444cc3344ff44000000000000000000000000
% 0000000000000000bbbb000b17000033eecc1100001700000b170000000000000000000000000000
% 0000000000000000000000000044ff44000000007e5c33ee112d0000000000000088ff000000000b
% a05c000000000000000000000000000000000000aaff220000000000000000000000000000000000
% 0044ff440000000000000000000011aa330000000000000088ff0000000000000000000000000000
% 00000000000000ff88000000000066ff990000000000000000000000000000000000000000000000
% 00000000000000000000000088ff0000000000000066cc000000000000000000bb990000000039d6
% 39000000000000000000000000000000000011ddcc00000000000000000000000000000000000000
% 88ff000000000000000000000044991100000000000000ff880000
% 00000000000000000088ff0000000011ccee33000000000000000000000000000000000000000000
% 000000000000384020000000080800ff88000000000000000000000000000000000044ff44000000
% 00123100000000000000000000000000000000000000bbee22000000000000000000000000000000
% 000000ff880000000000000000000011ccff8800000055cc3344ff44000000000000000000000000
% 0000000000000000bbbb0000000033eecc11000022ab000000000000000000000000000000000000
% 0000000000000000000000000044ff44000000000b00000059ab4400000000000088ff0000000000
% 4f3900000000000000000000000000000000000011eebb0000000000000000000000000000000000
% 0044ff440000000000000000000033eeee6600000000000088ff0000000000000000000000000000
% 00000000000000ff880000000066ff99000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff000000000000000000000000000000000000bbbb00000000008f
% 0000000000000000000000000000000000000044ff88000000000000000000000000000000000000
% 88ff000000000000000000000066ffdd33000000000000ff880000
% 00000000000000000088ff0000000000883300000000000000000000000000000000000000000000
% 000000000000000000000000000000ff88000000000000000000000000000000000044ff44000000
% 0000060000000000000000000000000000000000000022eeaa000000000000000000000000000000
% 000000ff8800000000000000000000000088ffcc220000000044ff44000000000000000000000000
% 0000000000000000bbbb00000000119911220000000b000000000000000000000000000000000000
% 0000000000000000000000000044ff440000000000000017a5abab44000000000088ff0000000000
% 000b0000000000000000000000000000000000000055ff7700000000000000000000000000000000
% 0044ff44000000000000000000000011bbff99110000000088ff0000000000000000000000000000
% 00000000000000ff8800000000338800000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff000000000000000000000000000000000000bbbb00000000000e
% 000000000000000000000000000000000000000088ff330000000000000000000000000000000000
% 88ff00000000000000000000000033ddff770000000000ff880000
% 00000000000000000088ff0000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000ff880000000000006644000000000000000044daffda440000
% 000000000000000000000000000000000000000000000077ff220000000000000000000000000000
% 000000ff880000000000000000000000000055ee880000000044ff44000000000000000000000000
% 0000000000000000bbbb4f7200000000007e4f000000000000000000000000000000000000000000
% 0000000000000000000000000044ff440000000000008846abababa02200000044e7ffcc44000000
% 00000000000000000000000000000000000000000000aadd00000000000000000000000000000000
% 0044ff440000000000000000000000000088ff440000000088ff0000000000000000000000000000
% 00000000000000ff8800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff000000000000227711000000000000000044f1ffcc4400000000
% 000000000000000000000000000000000000000011dd990000000000000000000000000000000000
% 88ff0000000000000000000000000011aaee1100000000ff880000
% 00000000000000000088ff0011cc6600000000000000000000000000000000000000000000000000
% 000000000000000000000000000000ff88000000000000dd880000000000000022eeffffffee2200
% 00000000000000000000000000000000000000000000000022000000000000000000000000000000
% 000000ff88000000000000000000000000000022000011000044ff44000000000000000000000000
% 0000000000000000bbbb0b43dd220000000000000000000000000000000000000000000000000000
% 0000000000000000000000000044ff44000000000022ff5b2d4f5c7e94170022eeffffffee220000
% 00000000000000000000000000000000000000000000111100000000000000000000000000000000
% 0044ff44000000000000000000000000000022000011000088ff0000000000000000000000000000
% 00000000000000ff880066cc00000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff00000000000077ff000000000000000022eeffffffee22000000
% 00000000000000000000000000000000000000000022000000000000000000000000000000000000
% 88ff000000000000000000000000000000220000110000ff880000
% 00000000000000000088ff11ccee3300000000000000000000000000000000000000000000000000
% 000000000000000000000000000000ff88000000000011ff660000000000000077ffffffffff7700
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000ff880000000000000000000000000000000000cccc2244ff44000000000000000000000000
% 0000000000000000bbbb33eecc3aa000000000000000000000000000000000000000000000000000
% 0000000000000000000000000044ff44000000000055ff220000000000000077ffffffffff770000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0044ff440000000000000000000000000000000022ee991188ff0000000000000000000000000000
% 00000000000000ff8866ff9900000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff00000000000088dd000000000000000077ffffffffff77000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000055ff7700ff880000
% 000000000000000044e7fff5f3330000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000ff88000000000044ff330000000000000077ffffffffff9b00
% 0000000000000000000000000000000000000000000000000022dd55000000000000000000000000
% 000000ff88000000000000000000000000000000000055eef3e6ffda440000000000000000000000
% 000000000000002de0edf7d511002200000000000000000000000000000000000000000000000000
% 0000000000000000000000000044ff44000000000088ee000000000000000077ffffffffff890000
% 00000000000000000000000000000000000000000000000055dd2200000000000000000000000000
% 0044ff44000000000000000000000000000000000088ffdaecffcc44000000000000000000000000
% 000000000044ccfff1ff990000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff000000000000bbaa000000000000000077ffffffffff80000000
% 000000000000000000000000000000000000000000000088cc000000000000000000000000000000
% 88ff000000000000000000000000000000000011aaffeeffe74400
% 0000000000000022eefffffff1220000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000ff88000000000088ff000000000000000022eeffffbec7ffbb
% 4400000000000000000000000000000000000000000000000000bbee110000000000000000000000
% 000000ff880000000000000000000000000000000000003ffcffffffee2200000000000000000000
% 00000000000017a0edddafa817000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000044ff440000000000bbbb000000000000000022f0fff9d2f3ff9911
% 00000000000000000000000000000000000000000000000011eebb00000000000000000000000000
% 0044ff440000000000000000000000000000000000005dfeffffffee220000000000000000000000
% 0000000022eefffffff8220000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff000000000000ff88000000000000000022f4fffffffff0880000
% 000000000000000000000000000000000000000000000044ff880000000000000000000000000000
% 88ff00000000000000000000000000000000000022f6ffffffee22
% 0000000000000077ffffffffff770000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000ff88000000000088aa0000000000000000008fffff725666dd
% ff5500000000000000000000000000000000000000000000000022eeaa0000000000000000000000
% 000000ff8800000000000000000000000000000000000077ffffffffff7700000000000000000000
% 0000000000004fabdff9c7ab4f000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000044ff440000000000aa88000000000000000000b4fcf9ab8188ffee
% 2200000000000000000000000000000000000000000000000066ff77000000000000000000000000
% 0044ff4400000000000000000000000000000000000077ffffffffff770000000000000000000000
% 0000000077ffffffffff770000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff000000000022dd44000000000000000000e6f1ffcc5daaffcc00
% 000000000000000000000000000000000000000000000000aaff3300000000000000000000000000
% 88ff00000000000000000000000000000000000077ffffffffff77
% 0000000000000077ffffffffff9b0000000000000000000000000000000000000000335226000000
% 000000000000000000000000000000ff8800000000000000000000000000000011eebb00245b1811
% 77110011110000000000000000000000000000000000000000000077ff5500000000000000000000
% 000000ff8800000000000000000000000000000000000080ffffffffff7700000000000000000000
% 0000000000004fababd8ffee66000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000044ff4400000000000000000000000000000044ff880067a00b2266
% 0000220000000000000000000000000000000000000000000000bbee220000000000000000000000
% 0044ff4400000000000000000000000000000000000092ffffffffff770000000000000000000000
% 0000000077ffffffffffc91100000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff0000000000000000000000000000000088ff4400000000444400
% 00220000000000000000000000000000000000000000000011eecc00000000000000000000000000
% 88ff00000000000000000000000000000000000077ffffffffff77
% 0000000000000022eefffffffcff8800000000000000000000001933334646525f5f4b5f5f522600
% 000000000000000000000000000000ff8800000000000000000000000000000088ff330000553700
% 00000099ee8811000000000000000000000000000000000000000000bb8800000000000000000000
% 000000ff88000000000000000000000000000000000011d3feffffffee2200000000000000000000
% 00000000000017a0ababc7f9f0550000000000000000000000000000000000000000000000000000
% 0000000000000000000000000044ff44000000000000000000000000000000bbdd110022ab440000
% 0000dddd6600000000000000000000000000000000000000000022dd550000000000000000000000
% 0044ff44000000000000000000000000000000000033f0fcffffffee220000000000000000000000
% 0000000022eefffffff7ffcc33000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff00000000000000000000000000000011ee990000000000000000
% 22ffbb4400000000000000000000000000000000000000000055dd22000000000000000000000000
% 88ff0000000000000000000000000000000000007affffffffee22
% 000000000000006644ccffcc4488ffbb110000000000000026465f5f4c463f3333334c5f5f5f5233
% 000000000000000000000000000000ff88000000002277000000000000000022ee99000000315b0c
% 0000002299ffee770000000000000000000000000000000000000000000000000000000000000000
% 000000ff880000000000000000000000000000000011ccee69ccffcc440000000000000000000000
% 000000000000002d89cc8949ccff8800000000000000000000000000000000000000000000000000
% 0000000000000000000000000044ff44000000004455000000000000000055ff660000007e940000
% 000044bbffdd44000000000000000000000000000000000000000000000000000000000000000000
% 0044ff440000000000000000000000000000000033eecc50ccffcc44000000000000000000000000
% 000000000044ccffcc4444eeee660000000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff00000000006633000000000000000088ff220000000000000000
% 0066ddffbb2200000000000000000000000000000000000000000000000000000000000000000000
% 88ff000000000000000000000000000000000066ffb4ccffcc4400
% 00000000000044bb00000000000055eeee440000000026525f5226000000000000003939260d0000
% 000000000000000000000000000000ff880000000077ff0000000000000000006622000000065b31
% 000000000022bbff6600000000000000000000000000000000000000000000220000000000000000
% 000000ff8800000000000000000000000000000011ccee3300000000000000000000000000000000
% 000000000000000044bb00000088ffcc220000000000000000000000000000000000000000000000
% 0000000000000000000000000044ff4400000000bbbb000000000000000011770000000044ab2d00
% 0000000044ddff220000000000000000000000000000000000000000001111000000000000000000
% 0044ff4400000000000000000000000000000033eecc110000000000000000000000000000000000
% 000000000000000000000011bbff9911000000000000000000000000000000000000000000000000
% 00000000000000000000000088ff0000000000ff8800000000000000002255000000000000000000
% 00000077eedd00000000000000000000000000000000000000000000220000000000000000000000
% 88ff0000000000000000000000000000000066ff99000000000000
% 00000000000000bb0000000000000022ccff880013525f4619000000000000000000000000000000
% 000000000000000000000000000000ff880000000099cc0000000000000000000000000000003755
% 00000000000000330000224400000000000000000000000000000000000099dd1100000000000000
% 000000ff88000000000000000000000000000011ccee330000000000000000000000000000000000
% 000000000000000000bb0000000055eeee5500000000000000000000000000000000000000000000
% 0000000000000000000000000044ff4400000000dd88000000000000000000000000000000947200
% 0000000000003300005522000000000000000000000000000000000000ddaa000000000000000000
% 0044ff44000000000000000000000000000033eecc11000000000000000000000000000000000000
% 0000000000000000000000000088ffcc330000000000000000000000000000000000000000000000
% 00000000000000000000000088ff0000000033ff4400000000000000000000000000000000000000
% 00000000112200006611000000000000000000000000000000000022ff7700000000000000000000
% 88ff00000000000000000000000000000066ff9900000000000000
% 00000000000000bb00000000000000000088ffa95a59190000000000000000000000000000000000
% 000000000000000000000000000000ff8800000000cc99000000000000007711000000000000125b
% 2400000000000000000099ffbb440000000000000000000000000000000033ff8800000000000000
% 000000ff880000000000000000000000000011ccee33000000000000000000000000000000000000
% 000000000000000000bb000000000022ccff88000000000000000000000000000000000000000000
% 0000000000000000000000000044ff4400000011ff660000000000001166000000000000004fab17
% 000000000000000000ddff99220000000000000000000000000000000077ff550000000000000000
% 0044ff440000000000000000000000000033eecc1100000000000000000000000000000000000000
% 000000000000000000000000000044eeee6600000000000000000000000000000000000000000000
% 00000000000000000000000088ff0000000055ff2200000000000033440000000000000000000000
% 0000000000000022ffee881100000000000000000000000000000000aaee22000000000000000000
% 88ff000000000000000000000000000066ff990000000000000000
% 00000000000000bb0000000000000000000057686849000000000000000000000000000000000000
% 000000000000000000000000000000ff8800000000ff7700000000000044ff660000000000000043
% 4f0000000000000000000066ddffaa2200000000000000000000000000000088ff44000000000000
% 000000ff8800000000000000000000000011ccee3300000000000000000000000000000000000000
% 000000000000000000bb0000000000000088ffcc2200000000000000000000000000000000000000
% 0000000000000000000000000044ff4400000044ff3300000000000088ff220000000000000ba05c
% 0000000000000000001188eeff8811000000000000000000000000000000bbee1100000000000000
% 0044ff4400000000000000000000000033eecc110000000000000000000000000000000000000000
% 00000000000000000000000000000011bbff99110000000000000000000000000000000000000000
% 00000000000000000000000088ff0000000088ee00000000000000ccdd0000000000000000000000
% 00000000000000002299ffdd6600000000000000000000000000000011eebb000000000000000000
% 88ff0000000000000000000000000066ff99000000000000000000
% 00000000000000bb00000000000000000013595bb6ff880000000000000000000000000000000000
% 000000000000000000000000000000ff8800000033cc44000000000000dddd000000000000000024
% 5b18000000000000000000000088ee4400000000000000000000000000000000ccdd110000000000
% 000000ff88000000000000000000000011ccee330000000000000000000000000000000000000000
% 000000000000000000bb000000000000000055eeee55000000000000000000000000000000000000
% 0000000000000000000000000044ff4400000066dd00000000000022ff88000000000000000067a0
% 0b000000000000000000001199ee1100000000000000000000000000000022eeaa00000000000000
% 0044ff44000000000000000000000033eecc11000000000000000000000000000000000000000000
% 000000000000000000000000000000000088ffcc3300000000000000000000000000000000000000
% 00000000000000000000000088ff0000000088aa00000000000066ff550000000000000000000000
% 0000000000000000000044bbbb0000000000000000000000000000000055ff770000000000000000
% 88ff00000000000000000000000066ff9900000000000000000000
% 00000000000044dd5511000000000000065259130088ffbb11000000000000000000000000000000
% 000000000000000000000000000000ff88000000000000000000000066ff44000000000000000000
% 4f3d0000000000000000000000000000004488110000000000000000000000003399110000000000
% 000000ff880000000000000000000011ccee33000000000000000000000000000000000000000000
% 000000000000000044dd55110000000000000022ccff880000000000000000000000000000000000
% 0000000000000000000000000044ff44000000000000000000000099ee11000000000000000017ab
% 4f000000339966001177770000000000776600000000000000000000000000668800000000000000
% 0044ff440000000000000000000033eecc1100000000000000000000000000000000000000000000
% 00000000000000000000000000000000000044eeee66000000000000000000000000000000000000
% 00000000000000000000000088ff000000000000000000000011ddbb000000000000000000000000
% 00000000000000000000000000000088440000000000000000000000000088550000000000000000
% 88ff000000000000000000000066ff990000000000000000000000
% 000000000000000000000000000000003f5f1300000055eeee440000000000000000000000000000
% 000000000000000000000000000000ff880000000000000000000011eebb00000000000000000000
% 315b0c000000000000000000000000000077ffee8811000000000000000000000000000000000000
% 000000ff8800000000000000000011ccee3300000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000088ffcc22000000000000000000000000000000
% 0000000000000000000000000044ff440000000000000000000044ff88000000000000000000007e
% 940000000088bb220044000000000000bbffdd550000000000000000000000000000000000000000
% 0044ff4400000000000000000033eecc110000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000011bbff991100000000000000000000000000000000
% 00000000000000000000000088ff000000000000000000000088ff44000000000000000000000000
% 000000000000000000000000000022ddffbb33000000000000000000000000000000000000000000
% 88ff0000000000000000000066ff99000000000000000000000000
% 000000000000000000000000284038205f2c000000000022ccff8800000000000000000000000000
% 000000000000000000000000000000ff880000007744000000000011993300000000000000000000
% 0656453d00000000000000000000000000002299ffdd440000000000000000000000006611000000
% 000000ff88000000000000000011ccee330000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000055eeee550000000000000000000000000000
% 0000000000000000000000000044ff44000011882200000000003399000000000000000000000039
% ab755c00008833bb00440000000000000044ccffbb22000000000000000000000011660000000000
% 0044ff44000000000000000033eecc11000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000088ffcc33000000000000000000000000000000
% 00000000000000000000000088ff0000003388000000000000558800000000000000000000000000
% 0000000000000000000000000000000066eeff990000000000000000000000002255000000000000
% 88ff00000000000000000066ff9900000000000000000000000000
% 00000000000000000000000050080e5946000000000000000088ffbb110000000000000000000000
% 000000000000000000000000000000ff88000000ff88000000000000000000000000000000000000
% 315b5b4f0033996600117777000000000000000044aa22000000000000000000000022ff88000000
% 000000ff880000000000000011ccee33000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000022ccff8800000000000000000000000000
% 0000000000000000000000000044ff44000044ff3300000000000000000000000000000000000b7e
% abab670000880088774400000000000000000066aa00000000000000000000000077ff5500000000
% 0044ff440000000000000033eecc1100000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000044eeee660000000000000000000000000000
% 00000000000000000000000088ff00000088ee000000000000000000000000000000000000000000
% 0000000000000000000000000000000000118888000000000000000000000000aaee220000000000
% 88ff000000000000000066ff990000000000000000000000000000
% 000000000000000000000020581820520d00000000000000000055eeee4400000000000000000000
% 000000000000000000000000000000ff88000033ff44000000002200000000000000000000000000
% 125b5b5b000088bb2200440000000000000000000000000066bb44000000000000000088ff440000
% 000000ff8800000000000011ccee3300000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000088ffcc220000000000000000000000
% 000000000011447799bbbbbbbbcdffa88888bfff889922000022000000000000000000000000004f
% abab7e0000880000cc77000000449922000000000000009999220000000000000000ccee11000000
% 0044ff4400000000000033eecc110000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000011bbff9911000000000000000000000000
% 00000000000000000000000088ff000000bbbb000000001111000000000000000000000000000000
% 00000000000000000000000000000000000000000000cc88110000000000000022eeaa0000000000
% 88ff0000000000000066ff99000000000000000000000000000000
% 00000000000000000000001040000000000000000000000000000022ccff88000000000000000000
% 000000000000000000000000000000ff88000066ff1100000033ff66000000000000000000000000
% 00245b5b00008833bb00440000000000000000000000000055ddffbb2200000000000011dddd1100
% 000000ff88000000000011ccee330000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000055eeee5500000000000000000000
% 006688bbeebb997744110000005dff764444d0ebd6ffee8890ff2200000000000000000000000000
% 67ab7e000088000033ee0000008800000000000000000088eeff881100000000000033ff99000000
% 0044ff44000000000033eecc11000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000088ffcc330000000000000000000000
% 00000000000000000000000088ff000000ee8800000000bbdd000000000000000000000000000000
% 0000000000000000000000000000000000000000001199ffee770000000000000077ff5500000000
% 88ff00000000000066ff9900000000000000000000000000000000
% 000000000000000000000020300008203808000000000000000000000088ffbb1100000000000000
% 000000000000000000000000000000ff88000088dd00000000bbdd11000000000000000000000000
% 0000245b0000880088774400000044992200000000000000000077eeff5500000000000044ff8800
% 000000ff880000000011ccee33000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000022ccff88000000000000000066
% dd99552200000000000000000044ff440000cc99aa887750efaa0000000000000000000000000000
% 00677e0044bb4400008800002299330000000000000000001188ffee2200000000000088ff440000
% 0044ff440000000033eecc1100000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000044eeee6600000000000000000000
% 00000000000000000000000088ff000011ff5500000044ff77000000000000000000000000000000
% 000000000000000000000000000000000000000000000022bbffcc00000000000000bbee11000000
% 88ff000000000066ff990000000000000000000000000000000000
% 00000000000000000000004018003808204000000000000000000000000055eeee44000000000000
% 000000000000000000000000000000ff880000889900000044ff6600000000000000000000000000
% 000000240c00880000cc770000008800000000000000000000000011771100111100000000662200
% 000000ff8800000011ccee3300000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000088ffcc220000000066dd99
% 2200000000000000000000000044ff440000bb7700000088ff220000000000000000000000000000
% 00005c00000000000000000000880000000000000000000000002277000022000000000077110000
% 0044ff4400000033eecc110000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000011bbff99110000000000000000
% 00000000000000000000000088ff000033cc33000000ccdd00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000445500002200000000226600000000
% 88ff0000000066ff99000000000000000000000000000000000000
% 0000000000000000000000500000000038200000000000000000000000000022ccff880000000000
% 000000000000000000000000000000ff8800000000000000ddcc0000000000000000000000000000
% 00000000000088000033ee000022993300000000000000000000000000000088ee88110000000000
% 000000ff88000011ccee330000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000055eeee550088dd992200
% 0000000000000000000000000044ff4400000000000022ff88000000000000000000000000000000
% 000000000000000000000000227700000000000000000000000000000000bbdd6600000000000000
% 0044ff44000033eecc11000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000088ffcc3300000000000000
% 00000000000000000000000088ff0000000000000066ff4400000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000011eebb440000000000000000
% 88ff00000066ff9900000000000000000000000000000000000000
% 00000000000000000008084000000028180800000000000000000000000000000088ffbb11000000
% 000000000000000000000000000000ff8800000000000022dd440000000000000000000000000000
% 000000000044bb4400008800000088000000000000000000000000000000002299ffee6600000055
% 770000ff880011ccee33000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000022ccffe79922000000
% 0000000000000000000000000044ff4400000000000055dd11000000000000000000000000000000
% 00000000000000000000003377220000000000000000000000000000000044bbffcc440000008844
% 0044ff440033eecc1100000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000044eeee66000000000000
% 00000000000000000000000088ff0000000000000088bb0000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000066ddff9922000011991100
% 88ff000066ff990000000000000000000000000000000000000000
% 0000000000000000003840200000285040300000000000000000000000000000000055eeee440000
% 000000000000000000000000000000ff880044880000000000000000000000000000000000000000
% 00000000000000000000000000227700000000000000000000000000000000000033bbff77000088
% ff3300ff8811ccee3300000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000033efffcc22000000
% 0000000000000000000000000044ff44006666000000000000000000000000000000000000000000
% 000000000000000000000022330000000000000000000000000000000000000055ddff220000ccdd
% 1144ff4433eecc110000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000011bbff991100000000
% 00000000000000000000000088ff0000884400000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088eedd000022eeaa00
% 88ff0066ff99000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000022ccff8800
% 000000000000000000000000000000ff880088dd0000000000000000000000000c1e314331000000
% 00000000000000000000000033772200000000000000000000000000000000000000004400002250
% dddaccffe9daee330000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000077dd3355eeee550000
% 0000000000000000000000000044ff4400cc99000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000440000444eff
% a8daffe1f3cc11000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000088ffcc33000000
% 00000000000000000000000088ff0011ff6600000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000113300005580ff82
% e7ffe0ff9900000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000088ffbb
% 110000000000000000000000000000ff8800bbbb0022ee5500000000000000435b5b5b4900000000
% 000000000000000000000000223300000000000000444400000000000000000000000000000088ff
% d4fffffffffe4e000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000001199bb11000022ccff8800
% 0000000000000000000000000044ff4400ff770066dd110000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000ccffd6
% fffffffffc3100000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000044eeee660000
% 00000000000000000000000088ff0044ff330099aa00000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000011ffeee4fe
% fffffff82200000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000055ee
% ee4400000000000000000000000000ff8800ee880099ee11000000000000003c5b5b550600000000
% 00000006000000000000000000000000000000000022ffbb55000000000000000000000000000066
% f2ffffffffff77000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000011cc8800000000000088ffcc
% 2200000000000000000000000044ff4444ff4400ddbb000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000001190f8
% ffffffffff7700000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000011bbff9911
% 00000000000000000000000088ff0088ff0033ff8800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000022b6ffff
% ffffffff7700000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000022
% ccff88000000000000000000000000ff8822ff5544ff88000000000000184f5b495b180000000000
% 0000003906000000000000000000000000000000000099fff0220000000000000000446688bbddff
% ffffffffffff77000000774466000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000011cc66000000000000000055ee
% ee55000000000000000000000044ff4477ff0088ff44000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000011447788bbeeffff
% ffffffffff7700000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000088ffcc
% 33000000000000000000000088ff00aabb00bbee1100000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000022448899bbffffffff
% ffffffff7700000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0088ffbb1100000000000000000000ff8833bb22bbdd110000000006375b4f180624000000000000
% 000000523f000000000000000000000000000000000022eee4660000446688bbddffffffddbb8866
% 5deeffffffee22000000998822000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000011cc660000000000000000000022
% ccff880000000000000000000044ff4466aa11ee9900000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000011447788bbeeffffffccaa88554e
% eeffffffee2200000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000044ee
% ee660000000000000000000088ff00887744ff660000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000022448899bbffffffffbb9988443fee
% ffffffee2200000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000055eeee44000000000000000000ff88000022ff66000000001e555b3100000000000000000000
% 0000005e5e2c00000000000000000000000000000000447090f1efffffffddbb8866440000000000
% 0044ccffcc4400000000443300000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000011cc66000000000000000000000000
% 0088ffcc22000000000000000044ff44000066ff2200000000000000000000000000000000000000
% 000000000000000000000000000000000000000011447788bbeeffffffccaa885533000000000000
% 44ccffcc440000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000011
% bbff9911000000000000000088ff000000bbdd000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000022448899bbffffffffbb9988442200000000000044
% ccffcc440000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000022ccff880000000000000000ff88000000330000000c435b430c0000000000000000000000
% 0000005e5e5e13000000000000000000446688bbddffffffddc0c8e1690000000000000000000000
% 00000000000000000000660088110000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000033cc6600000000000000000000000000
% 000055eeee550000000000000044ff44000000330000000000000000000000000000000000000000
% 000000000000000000000000000011447788bbeeffffffccaa885533000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0088ffcc330000000000000088ff0000001122000000000000000000000000000000000000000000
% 0000000000000000000000000022448899bbffffffffbb9988442200000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000088ffbb11000000000000ff888844000000003155552400000000000000000000000000
% 0000005e5e5932000000446688bbddffffffddbb8866440000000044dd8811000000000000000000
% 00000000000000000000000088660000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000033ee660000000000000000000000000000
% 00000022ccff8800000000000044ff5d882200000000000000000000000000000000000000000000
% 000000000000000011447788bbeeffffffccaa885533000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044eeee6600000000000088ff4488000000000000000000000000000000000000000000000000
% 0000000000000022448899bbffffffffbb9988442200000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000055eeee440000000000ff98ffc7220018495b3d060000000000000000000000000000
% 00000032586088bbddffffffddbb88664400000000000000000000001188dd660000000000000000
% 00000000000000000077660088660000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000033ee66000000000000000000000000000000
% 000000000088ffcc220000000044ff8fff9011000000000000000000000000000000000000000000
% 000011447788bbeeffffffccaa885533000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000011bbff99110000000088ff99e4770000000000000000000000000000000000000000000000
% 0022448899bbffffffffbb9988442200000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000022ccff8800000000ffb0ffff26315b4f1800000000000000000000000000004466
% 88bbddffca5e99bb886644000000000000000000000000000000000000003399dd99330000000000
% 00000000000000000022441199110000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000033dd3300000000000000000000000000000000
% 00000000000055eeee5500000044ffa8f8dd00000000000000000000000000000000000011447788
% bbeeffffffccaa885533000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000088ffcc3300000088ffd3f89900000000000000000000000000000000000022448899bb
% ffffffffbb9988442200000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000088ffbb111831d3cfff79555b3106000000000000000000446688bbddffffff
% ddbb886644395e1f0000000000000000000000000000000000000000000000000066aadd88220000
% 00000000000000000000114400000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000033dd330000000000000000000000000000000000
% 0000000000000022ccff88001850d3e1ff5500000000000000000000000011447788bbeeffffffcc
% aa885533000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000044eeee66001870d3fff62200000000000000000000000022448899bbffffffffbb99
% 88442200000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000055c76f5b5b5bd7905b43120000000000446688bbddffffffddbb88664400
% 0000000000004b580c00000000000000000000000000000000000000000000000000001177cccc88
% 77441100000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000033dd33000000000000000000000000000000000000
% 00000000000000000088d36a5b5b66ffe30000000000000011447788bbeeffffffccaa8855330000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000011bbd3635b5b9fffb00000000000000022448899bbffffffffbb99884422000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000c575b5b5b7cbe633100446688bbddffffffddbb88664400000000000000
% 0000000000000c584b0c000000000000000000000000000000000000000000000000000000002244
% 7788bbeebb9988774444440000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000033dd3300000000000000000000000000000000000000
% 0000000000000000000c5b5b5b5bb8ff9c0c11447788bbeeffffffccaa8855330000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000c5e5b5b5bdffc620c22448899bbffffffffbb99884422000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000375b5b5b5b66a75b90ffffffddbb88664400000000000000000000000000
% 00000000000000195e5e3f1f00000000000028403800000000000000000000000000000000000000
% 00000000114466888888bbbbbbddddbbbbaa88888855441100000000000000000000000000000000
% 000000000000000000000000000000000066dd330000000000000000000000000000000000000000
% 000000000000000000375b5b5b5b719c5b96ffffffccaa8855330000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000375b5b5b5b87875b9cffffffbb99884422000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000004f5b5b5b5b5b5b5b64664400000000000000000000000000000000000000
% 0000000000000000062c525e522c0600000050080800000000000000000000000000000000000000
% 0000000000000000000000000000000011444444888888bbeebb8866440000000000000000000000
% 0000000000000000000000000000000088cc22000000000000000000000000000000000000000000
% 0000000000000000004f5b5b5b5b5b5b5b6455330000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000004f5b5b5b5b5b5b5b644422000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000004f5b5b5b5b5b5b5b56000000003399660011777700000000000000000000
% 00000000000000000000001f3f5e5e45002058180000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000224488aacccc771100000000000000
% 000000000000000000000000000011aa991100000000000000000000000000000000000000000000
% 0000000000000000004f5b5b5b5b5b5b5b5600000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000004f5b5b5b5b5b5b5b560000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000044224400375b5b5b5b5b5b5b3d000000000088bb2200440000000000000000000000
% 000000000000000000000000000c1f19001040000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000002288dd99440000000000
% 0000000000000000000000000033cc88000000000000000000000000000000000000000000000000
% 000000000000000000375b5b5b5b5b5b5b3d00000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000375b5b5b5b5b5b5b3d0000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000033660077220c555b5b5b5b5b570c00000000008833bb00440000000000000000000000
% 00000000000000000000000000000000002030184040300000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000055aadd88220000
% 00000000000000000000000044dd5500000000000000000000000000000000000000000000000000
% 0000000000000000000c555b5b5b5b5b570c00000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000c555b5b5b5b5b570c0000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000884400448800184f5b5b5b4f1800000000000088008877440000000000000000000000
% 00000000000000000000000000000000004018200010100000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000002277dd7700
% 000000000000000000000088cc330000000000000000000000000000000000000000000000000000
% 00000000000000000000184f5b5b5b4f180000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000184f5b5b5b4f18000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000088440044880000001831180000000000000000880000cc770011555511000000000000
% 00000000000000000000000000000000005000000030000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000011aabb
% 22000000000000000044dd8811000000000000000000000000000000000000000000000000000000
% 00000000000000000000000018311800000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000001831180000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000008844004488000000000000000000000000000088000033ee0077111177000000000000
% 00000000000000000000000000000008084000002820000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000055
% dd66000000000011aacc330000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000077440055660000000000000000000000000044bb4400008800aa000088000000000000
% 00000000000000000000000000000038402000004018000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 22bbaa11000077dd7700000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000001188008811000000000000000000000000000000000000000088000088000000000000
% 00000000000000000000000000000000000000000800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000099cc66dd99110000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000440000000000000000000000000000000000000000000044555544000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000098a72200000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000111100000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000667744aa556688000000000000000000000000000000003399000000000000
% 00000000006677000000000000000000000000000000000000000000000000005588770000227700
% 00000000000000000000000000000000000000000000000000000000000000000022884488774499
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000550000bb0000550000000000660000000000000000000000bb000000000000
% 00000000004488000000000000000000000000000000000000000000000000009900000000115500
% 000000000000660000000000000000000000000000000000000000660000000000550000bb220055
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000220000bb0000224455220044bb4440442222002255110000bb224400000044
% 5522002233668800334422220033442200334422440000000000003344220033cc44000000224400
% 334422440044bb4411004455223344222200445522001144442244bb4411000000220000dd000022
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000bb0000556600990000bb0000dd3355337700990000dd114477005566
% 009933770055880000dd3355446600774400dd11447700000000446600774400bb0000000000bb00
% 00dd11447700bb00005566009900dd335555660099008800114400bb000000000000004499000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000bb0000aa5544880000bb0000bb0000005544bb0000bb00448800aa55
% 448899440044880000bb0000aa1100449900bb00448800000000aa1100449900bb0000000000bb00
% 00bb00448800bb0000aa55448800bb0000aa5544880055bb881100bb000000000000008866000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000bb0000993300110000bb0033bb0000667700bb2200bb004488009933
% 001188440044880000bb0000993300448800bb00448800000000993300448800bb0000000000bb00
% 00bb00448800bb00339933001100bb000099330011005500448800bb00330000000000bb22000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000001144dd552211774455000099554edd3300558833aa4433dd2277aa111177
% 445511882277aa1133dd3300227744771133dd2277aa11000000227744771133dd3300000033dd22
% 33dd2277aa119955221177445533dd3300117744550099334455009955220000002255ff44110000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000004455668844550000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000044
% 55668844550000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000004455668844550000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000003300774400220000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000033
% 00774400220000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000003300774400220000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000004499444488110000aa0000000000000000000000000000000000
% 00000000000000000000000044bb1100229933000000000000000000000000000000000011555555
% 000000000000000000000044bb110022993300000000000000000000000000000000000000000000
% 44bb1100229933000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000044994444881100
% 00aa000000000000000000000000000000000000000000000000000000000044bb11002299330000
% 00000000000000000000000000000000115555550000000000000000000044bb1100229933000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000004499444488110000aa0000000000000000000000000000000000
% 00000000000000000000000044bb1100229933000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000004488000088770000aa0000000000000000000000000000000000
% 00000000000000000000000044886600004400000000000000000033000000000000000066000088
% 00000000000000000000004488660000440000000000000000000000000000330000000000000000
% 44886600004400000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000044880000887700
% 00aa0000000000000000000000000000000000000000000000000000000000448866000044000000
% 00000000000000330000000000000000660000880000000000000000000044886600004400000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000004488000088770000aa0000000000000000000000000000000000
% 00000000000000000000000044886600004400000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000008855000099441166992200000000000000000000000000000000
% 0044440000000000000000004411dd00113300000000000000000044000000000000002233446633
% 00000000000000000000004411dd0011330000000000000000000000000000440000000000000000
% 4411dd00113300000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000088550000994411
% 669922000000000000000000000000000000000000444400000000000000004411dd001133000000
% 0000000000000044000000000000002233446633000000000000000000004411dd00113300000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000008855000099441166992200000000000000000000000000000000
% 0000444400000000000000004411dd00113300000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb55445544000000000000000000003388888888888811000000
% 99112288440000000000000044009944440000000000000000000044000000000000004411448811
% 00004499315555110000004400994444000000449922115555110000000000440000000000000000
% 44009944440011555511000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000bb554455440000
% 00000000000000003388888888888811000000009911228844000000000000440099444400000000
% 00000000000000440000000000000044114488110044992211555511000044009944440000004499
% 22115555110000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb55445544000000000000000000003388888888888811000000
% 00991122884400000000000044009944440000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000dd00000011555511000000000000000000000000000000000066
% 660000bb440000000000000044003399440000000000000033888899888888110000004400005544
% 00008800771111770000004400339944000000880000771111770000338888998888881100000000
% 44003399440077111177000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000dd000000001155
% 3300000000000000000000000000000000000066660000bb44000000000000440033994400000000
% 00000000338888998888881100000044000055440088000077111177000044003399440000008800
% 00771111770000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000dd00000000113355110000000000000000000000000000000000
% 66660000bb4400000000000044003399440000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000449900000077111177000000000000003388888888888811000088
% 440000dd1100117744550044000000cc550011774455000000000044000000000000006600008811
% 00229933aa000088000044000000cc55000022993300aa0000880000000000440000000000000044
% 000000cc5500aa000088000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000004499000000000044
% 4400000000000000338888888888881100000088440000dd11117744550044000000cc5500117744
% 550000000000004400000000000000660000881122993300aa0000880044000000cc550000229933
% 00aa0000880000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000449900000000663311550000000000003388888888888811000000
% 88440000dd11117744550044000000cc550011774455000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000022aa99110000aa000088000000000000000000000000000000000044
% 6633338833008822000022aa44000066330088220000000000000044000000000000226644555500
% 00008800880000880022aa44000066330000008800008800008800000000004400000000000022aa
% 44000066330088000088000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000022aa99110000000044
% 440000000000000000000000000000000000004466333388338822000022aa440000663300882200
% 0000000000000044000000000000226644555500008800008800008822aa44000066330000008800
% 00880000880000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000022aa991100000011bbbb110000000000000000000000000000000000
% 4466333388338822000022aa44000066330088220000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000088000088000000000000000000000000000000000000
% 00000000000055554433000000000000000055554433000000000033000000000000440000000000
% 00227700445555440000000000000000000022770000445555440000000000330000000000000000
% 00000000000044555544000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000044
% 44000000000000000000000000000000000000000000000000555544330000000000000000555544
% 33000000000000330000000000004400000000002277000044555544000000000000000000227700
% 00445555440000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000551144770000000000000000000000000000000000
% 00000000000055554433000000000000000055554433000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000044555544000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000440000000000
% 33772200001111000000000000000000003377220000001111000000000000000000000000000000
% 00000000000000111100000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000001177
% 88110000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000004400000000337722000000111100000000000000000033772200
% 00001111000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000444433440000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000111100000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 22330000000000000000000000000000002233000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000223300000000000000000000000000000022330000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000001111000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000002e5c2e000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000002e95acacac952e00001188554444660000
% 00000033990033990000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000033aa5500
% 00668811000000000000000000000022770000000000000000000000000000000000000000000000
% 55887700002277000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000017a1acacacacaca11700bb22000022880000
% 00000000bb0000bb0000000000000000000000000000000000000066000000000000000000000000
% 00000000000000002d89ab892d00000039abd6ab390000000018495b491800000000000000995500
% 00551100000000000000000066000011550000000000000000000000000000000000000000000000
% 99000000001155000000000000006600000000000000000000000000000000000000006600000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000067acacacacacacac6744bb00000000330044
% 55220000bb0000bb00000000002244220044552200334422440044bb441100445522334422220000
% 0000000000000017a0abababa017001cc8d6d6d6c81c00000c555b5b5b550c00000000000044aa00
% 005500004455223344222244bb441122440000224422004455220011444422000000003344220033
% cc44000000224400334422440044bb4411004455220033442222004455221144442244bb44110000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000095acacacacacacac95888800000000005566
% 00990000bb0000bb00000000448800aa556600990000dd11447700bb00005566009900dd33550000
% 000000000000004fababababab4f0063d6d6d6d6d66300002a5b5b5b5b5b2a00000000000000dd11
% 1155005566009900dd335500bb000000bb00448800aa556600990088001144000000446600774400
% bb0000000000bb0000dd11447700bb0000556600990000dd3355556600998800114400bb00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000095acacacacacacac9555aa0000000022aa55
% 44880000bb0000bb0000000099440000aa5544880000bb00448800bb0000aa55448800bb00000000
% 000000000000004fababababab4f0063d6d6d6d6d66300002a5b5b5b5b5b2a000000000000007777
% 440000aa55448800bb000000bb000000bb0099440000aa5544880055bb8811000000aa1100449900
% bb0000000000bb0000bb00448800bb0000aa5544880000bb0000aa55448855bb881100bb00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000067acacacacacacac6700cc11000000449933
% 00110000bb0000bb0000000088440011993300110000bb00448800bb00339933001100bb00000000
% 0000000000000017a0abababa017001cc8d6d6d6c81c00000c555b5b5b550c0000000000000022cc
% 6600009933001100bb000000bb003300bb0088440011993300110055004488000000993300448800
% bb0000000000bb0000bb00448800bb0033993300110000bb0000993300115500448800bb00330000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000017a1acacacacaca117003388332266111177
% 44550033dd2233dd2200000011884466117744550033dd2277aa119955221177445533dd33000000
% 00000000000000002d89ab892d00000039abd6ab390000000018495b4918000000000000000000aa
% 2200001177445533dd33000099552233dd2211884466117744550099334455000000227744771133
% dd3300000033dd2233dd2277aa11995522117744550033dd33001177445599334455009955220000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000002e95acacac952e00000000333300000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000022
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000002e5c2e000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
%%EndImage
%%EndPreview
save countdictstack mark newpath /showpage {} def /setpagedevice /pop load def
%%EndProlog
%%Page 1 1
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /Library/TeX/texbin/dvips -Pdownload35 -T
%+ 16.668557131886484cm,7.62783630669117cm tmpPSFile -o
%+ /var/folders/9b/b810lcpj4qb5f1w9fppzlbqj8c0kn8/T/latexdraw/latexdrawTmp159861899168016982/tmpPSFile.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2020.08.28:0749
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%Version: 003.002
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
FontDirectory/CMMI7 known{/CMMI7 findfont dup/UniqueID known{dup
/UniqueID get 5087382 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI7 def
/FontBBox {-1 -250 1171 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI7.) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 84 /T put
dup 99 /c put
dup 102 /f put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBBAAB71645535A2B
6F0F22458E1429F4A67307E01F0BCF6F337E0E2AD89658D880B04C26306F8179
C8121B958459B923AC3B05B594D8AB95F75870019130442FD29578D44F5690BC
7281357A5041C8A809A59D0DEE108E2A07D406656BC74A9F3317CB887E712318
46B2ECAA341F8692ACC2D14ABABDFBCAC6F35858355F1D3228B0223EC73AC56F
3C987464DB829F243E304F4C59CDE3EF6EB53A4EF9BA91510CB89A3407261F58
A2AE66880BA98FC1EF546112892494C85A2C39F9DCCAC5766725894A7AA148E9
42360AE64BF3A4F1F9F0A0D0C1AAFDC4D50C52233AA595B7D0CE557D4A010D86
6E6B76A7E9523E8A6633DA9348BC3F59302F72F492A30782AE7EF220516893D3
DE836CDE311DED9262AF01C506040541EE84AAC539B404B23033EF56D4BCE6BE
B05F79CD633FE75C6728114D2749E39FD7454050F67763AB636377BA8E1867C3
996C7D7D4A4A02BC49D1AD7FF174C1F49F1F205BC9D5AE42BCB02CF8554E8F5A
D1876C9285B6CCD7B8C165F75843B0AA11D8462B57077AFE75BAD086E9D9F91E
30ACFF91776132F3CACAD1CA5E08B17B36A0E45ACBAC52393B9AF9089BD821D9
CD5A9CD9BECA59F7445D63DECC1B4502D299DB85B6E2EE7C69A1DAB91E22A3A5
89B524FA20AF6005E7A586B90A2C6E5A93C9EFA4ABEF5F7E4C7B81363FE8D2B3
0AD637FA863DE787581ADD7CBE463F7866C40F4E280260ED0E9C8453E5C7E668
FFF058B9742DD3F131C264F8FA102CD0DA05F3114D13D34D422799181453FE23
2FC6EFB01BE420C930B879D671F3DFB036197874725220644A5A52DFB467BB75
8089E4F40CE9401777B9FE1D0AEE02E782A6EB2A185A454AE9394094CDFE7CFA
C03C23A78EAF242E4F811E4C83B59EF4DC5ACE4AD37B41616B46C263358710B2
6137314545CA6CE89119B42A3518EC85C68DC07D26839C68B1FF55C4A9CD518B
A1FB32F9C475BB6110839FCCB94156E7B3648F27245A00D2966FC4DDE3996BFA
F463A663CB6935B596B1582ED0ABBC648AAA8A86068BF0038001C753C8BAFA0D
2058041DFA720B528E2D4B16196DB1CF30C779D3F4800FE662D5B60B208341F2
A66EFCB8448C2FCD12DF0DD899911A8BD96C9B670054D328790E5D388518B146
8CE92E368EB1DB3CAAFCA4834CC9D9D9DCC80FB1F34F39DACDE643052C977A7E
A95C5FA8DFED9B4DCE769E4E46256D6DA8FB18FD7FA4E4CED5D486803538F3B4
6D3F5B3C03184F5C26C66DBB4C724918EBB6A89C4602E4EDDA81EEE2BD18B683
FDB459F2CE0A9CED23DC208EAA8BEDB304B00E093DEE926A7B32FDB2EC70DD85
94B9137856DDDABB402B2C76DBA87149051ADC6007018EBDD571BE1D092EBD95
76D4E063AD7D5F62E6C26EDB88D38678F2806A1F4900B0ABC4ED034A818119A4
E618F1A902315BC98F26775E59555A3DCEA1D0F8B20A9084920ECBE3F7F245AC
1182A40B518B194669D95DE968542BFF80FDC89669BC256C44CB66A2AB8CD7A9
E42C69956CCB6BDE8C09AD22EF3196939B3B84EB23A6E071A36D702909E019FF
058F27562441EB5CAE87A4407F67C4390810BE89BBE867D636468E73677B84C8
5A1228DD7DC8EADA221B1BAD5F43E832F20ADE7ADBFF170AB306F5B711816FD1
39B7882556E30F002977FB88D8B28826A75DE0D20354A2D41F2DA8578376F7DD
F27B0F59D4DDDF5790E11E3957491DC74EEB7625CA49FAD90FA47AD8E0BDE824
FF326A84846A47A21B70FA549BEE307F9C6970009F963B49A504F0115777826F
1D81203F655C242FFF15BA97E3BDDFBF435B10E74CE8543C98966223818839B3
6BF3BC63F882B0AD0FDACA8C56A570277952E1D83F18BEDF084D2AC004E2B09D
70DE1740D7D220E92B54D2FD0DDEAF1E08C41FD321A8D474982DD105B23166A7
AA9E0129DC88065B1E0F9382BEB4B4E1DAAE3EA5489BDCA921AD5A8175F2841F
9400478DFA99C5E5553F383882664D73FBDFA29BF32E52C28DCE80DAF4839434
022FA515679DBC13FE98968D2894DF5DD69C49BD23D00F5D858B69D1F220F968
F0700E13873579B3CFB658972098DC61F1DD580105BC27795DB4AF11A871CCD6
2E1B9AF7F0DAAD4CE315379A7B42CECB983DAC5A2B9426B4E5E0A7F7978504C1
DD7E30063AE3CBDFB24EA2BCCDC478AB82084FD30A4793F4707D9F8F9647B413
F8A5C5AC6D5EA0E35628CE1096A434FB8286F4617CB4D0AD30A4A0B255A5A356
25AA5A947FD3C4FA44B4AA80BAB44C48CC1E2C6D0A711365A37A58C3483D07ED
301A83D2650A2E8CBA9EE62FF5C2736EC82C1402959F64527F9B640619F112D9
8E0F4A8A3078C72ACF3F34AD855AA4008C96E30D9E8C414607C34E06E29AC5B9
2EE5DDB823E8C3EEE6A8DE228313D476A7F39B5DFBFBDEDDF7C45C1C88EE6D01
7FB4F7BB2CBBD5DF7F0CBD98DC287FA6940FBFE1B3B136613A3CF16634CA7B90
53D5FD5776515EFF5D37F8FCC62D8BEC8EE2216503D54D6F2032D3C2BF861E15
FD1B45B71576F15852EEA65DD372E911EF4CC18283CD2FF4196A3F1A9D81137F
F1820EC604D6C61AF318C6C5AB6DA1EDF305CADEF7CC0183B86D31310A09972C
A4BC37D110C77ECCA614D1A281EE1C2040B4A5ECB31A3FC61760F608E44332D1
D2C53C7891B505A3020E9E4915F3618588FCEC80B9ECC5E637D8D0F3C94B1F2A
C53FC46CAE0AFAA7E12266C212A73AAE60199752C042BD55A5DF1CD07FBDB830
C83E7832D8554AD9C9CAEEC7CED1DAEE622090897641CF2E5B34A353D83264D4
4687522DB290D3BA927BA315EA5D25B0D7B69350C6C180AB0C322B05E01F7C7D
F2F48651567F0C1B49AF3950E43C94D78F7B184BF2946B924BC4279AED28F3A0
17A7D8B235698A516D3FB5DF0B18A422B2410C385E7E9439C6D60917EB3299AD
E31471616251FA40C9FA098109BB31A54D9C03B2F12947E4E9252A0851B81C4D
F39E7FC44752504B589C3911571B1D3EC3BD1E1807F99CED1DB20270E483A805
CA2A016E7283550D1B1D35C226FAB63F983CED41A4D02A2F228FA9EF065027B3
CC69D6F2E278C0A2D238D3A37154B0D22281F62C61D9182A69657B027BBDED64
11E261E47620602F865221A534C5A32E2BF5B93A187911A146F2E96538B47DBB
7BFA7EF406FE940F4DAD17E6E4B80C4F031D71F65657C2F5C8233EEAC68DE8A7
E1FC3055C122C1795D0C71A0284F89A9BF04837F61C9E08DB42644A490C97D34
A5D3CEE475B8D578205005A0D68AF94AD27C0E855BB8EDB74775690A4EDD6543
BCC10CF13283D6FA8A7CF3FE6C4F96470A11FF0B0160D3F9816B13B0BAE0D8F9
B84C7631063FE658D13D108D6FE24A89799FABA72E6A6D1C943922CBE676C1B6
11A4106ECB4F1A7F8A84B2783C2E6A109C58D63FC0B74D8C8A1CB62D527441AE
E656D94B1AA8581B4F07B653ED6486AAE1F8ADB30FA8D8914AF24721C74B0908
D84F2EBB91144ED4BD7EF533F2584048DEE37E17CDE5FBC2992A6F924FEBAF07
B626F988599DECDAB43C931CFECF99FC6EBB72F8E542765C26295902DFF60B7C
7B9ADDB4858BC9D808B7F0909690CF8DFBC59A786D48B891937C31A219842A43
234425B4963062DB4C4E9F534C77F4243408805B5A6B8BBF428632CA4AC03A7A
E336DD181CE0CF3E742079E2919EAFABE16A63299771BF276EFA8D85C920F995
5B9D4E8F1ADFCC5C29AA89BF90C186C5DE7679906B2FD4DB279D245D27D08837
D3A8D541FE37415B706EC585C05804108C1D938E543B8B63E275EE85CE9DD843
0A8B9163144B77DA1A552A25D5E77E94F29CF252BE9950F4E627D5F72536B6F3
3278D4A45D10759F16AE42BAE8460865FEE84537F8EC9BF4813570E883B826FD
1ABF3F4E66DB6FEF8366E07BCF290EA67D39C9D81B2A7EA48E0A228FE3D5AA50
1A56CCBF229C9AF2537A8FA70EEF41096ACED34CC7BEECA4EA1F23B39FBC39D8
CCEA93E63F508CBE6722C11467A3D0D5C4C52031DE43C449333E4295104651CE
E13B821D7904653346067E971BE0042C571ABF40C3A1079A675FE4264B784D46
1B8FAA4CDE9851C4EBF69ADF51A7B68CC8706C08D13A44909D4C1D78DB0E0B2D
0E0318304B229DD2FDC968027CDFF65722059C62154304D6F9C3F06DE22914EE
928B7D1BF1FC7E74B4D882998D59BC086AA2D4EAD0AE39F6B75B5A3FB9994506
E21731E1A15F0F2D12F88724BA72898197A80FDAC00243A3038871EBD2F2BAB1
C616278BB78490CB86F552CBE5DD0862F3793D72C68AC16AF8E38FE1A523A5FA
9B0428745B1455671CFA1F6BFBCCF9CA23C833113C2948E7A6AEFFF1A83509FF
C559BB5EE7F92BB43F7F37A371E661C826F63DD0C1B25E34A8119E71EC82FB66
23C7B126FB6554E7560B1B69F2EDBB742F3B20D1648C151C37A8570CBD330A9E
7592A8607D2D727F3AAA0FF2057DF4E2A4C7D3B658C6CED38824A770420D89E7
F6AD385DBCE9C9A9095CF0042052A67AB804A6675BB9373A99390CBDFB715984
A069DE543E4C6ADD7F1EC7A15392EF834EAB4584679A43443953427DB13E6959
0F2F5061C99C6D00FA5327FDB5330AEDE19A53DE3AE092634DC6AEEAF63A5BED
990F8A117AEB1CA0E7F7DBE02CB3D86465F1613B976D1CF6F3A1E69740A2FDC8
062ACC45EDA6B863B60015F276860FB79C31D28F97A799568E66D0A8757B2C41
E939337B467303041D0F4C59390B2E41E5F298F275DCC699D27C459ED4D5ADBD
02539F00095D7E1872862142B46BE06513D3EB1A406E6BAA64BE795122100F09
C37E5D1834218EC1D11B031C7DFC9F5AB071A8F4DC08203821366959E9191D4B
289682D915AF28CE5858F83338DC51B6B0DD052A181D9133FBA50CF18F70EE65
C33726A0450EBA9D0E0C3662AF6C2121AB7911AA9880D6BB6811D6D7515888E7
199A0E632104059A88C9D85B19BB35EDF4AB95E1515BB2339572928BD5FE8CBD
2D4DAF55DCFE29FBC4C3D56336277BA0C9A889A129F9FA7052AD1420B8705163
1A808EC1284C888D78CEA2B4BAB71AD76289F5F4986008FA9BF328E8537E6C91
E11DBDD8447E1C9ACE18DB0EC3D5742C264C8EFA445C5D16C2930FB43669774F
A2CA52144D99EFA8FC427DB4128CD4C036A8C611B087335C780740FAA419D39B
5DD68EA89C95275F9254D947EB3683D0130255269B10C6CFF29EA0BE484C9949
96188FCB747618A8044E2E37DFFD2DB8ABB621B34DC024259340677095B6937A
78EDCF508AC91D4CEFD872AD73F50582DC8807143CEB9F109C84DC5DA30B64E2
E56DE973088A9D32583D6946DB4F3523902FB1781D993B89D5F56D79D5D98CC1
7FEE73FC3A7D1BCCE90179AE450829E228B4DEAD3B2B4C79A400CFF899AB26F9
048B0875EBC871AD23BA96F88CDA8B87FE5809A13889A6AC349ABB25E54ACAA9
C213C5DE2D01BCB9CC0D7BBD384D23AE12E289FF8FDF1F611F5E14D4B20B15A3
42D9B3B37A83A9CA39B5DB6C8316C51B70F211530A56CFE54D63E88169CF5233
D1A7B2388025B3EBD2BEE0716C3A2D589EBC7A42B3DA602AC4E2FD9C9052C922
711E44408DEEA1FE0C9FD50A39AD46D437F61F284A2EFD42EF158EDD71A1486D
4865D6B5E20E60F4F4FC3D646909FF1EE2D7573665E4CD8340A1B232CAC0202C
C35BA9BB3D2267C7E78518F6711633F888EBEF72DC750AC2CB362D528CFC8B2E
A1AE1C05456F50EED8CAA768DEF47FF85C4322F02D7F9D188C6F285C674EF589
251B0B913339FD701FDB281338D96704ED7ED908BC113B4275A24D058955890B
12CCDD5572D63688426B0E1E9A40D6AAECFA5555C1CF9DBEF8C04CE1E5A63F14
969D39B6DAE8A91F6AF4CD1E2DA89A4661DA34E272B6032C442C031F081F5DF5
858F4620885773D8A2B2F5EB6DDA74C1408DF279900450E4A3E80BA9A9B1295E
F24EDC3F6EFD81A741EF74B0202820516C4FB720687BDD915EB2396128C3B262
20E3075DA153D6FD36E1C05B855929DAA4DE694B6F15EF2145C63250B24B031A
4CF0AFDB225E91D99828B83BD90F1702D3906D45872587A3A116B138AD9627CE
E778A949C392202823C670FDBC56F1896FFFFBCF52C4B400F67BA36B5FCE44A5
F18EEB8ADFC088C99DFF8E0A593E81A5ACA2E3693005F723C7D3E0AE2BDD3805
8C6007A00542DEB2539709558A88B21003CE4B2C7817AF207ED576B25A41DEA0
FC55A459BEB00ADB01309B35920F04F84B7B64F95AA99EBCB843A06CED900D99
97BEFD7CCB9F4D85876F10160C8D63E2FDE82B7A8D945F37CC9933ABE0FD1D76
268296B1A5AB06B2E814691128771694224781171DC6266BCC290FCE1AB59416
85530368115BABD4F1DE45952918D1945D51EB713C283DAE8EDD559F437CD886
A4B1DA6120D685C284673A3EE489FC1AE4297A3623B339B7D886B6B4B8F9F4A3
7BF85E320A52FDC6323B51879B98A14C33C567BC069D9B44616514EE1BE36F90
EC5FA33E1B6B0A46945D876EF0085E74935DF2560A03321861A752E59742B9FC
5C501FBC64BFB1602459885B63873DC857ED37F8BE1A9C6E9517B9BF5A6161BD
DEB6DB0381FFB34A8A96AB4AD48BEC40D4C198ABC599C3758AFF638AA75BBDA4
8545D5F95FA426FB25587301A43E176F6CED7851E815AD907F2443E70740DD2D
4FBD5D978B9B37F59D6DCF0ADD0F90825DD23558FCB858513602C8BC82BFA383
7AA6DCEA4009961D06DF233C5381A7F9541259926446B2F03664BC5978A1B6CD
EA6EBC9FE6100A65959513EEE32E69D47B55BAF30A893D77142F943982019C01
715CE29923795EA01C58A798979939B507C5B29A32881877EF7EF0C5CB3DE591
6B9A6C3F3FFA847F396A396F078860B59850BA4CA3115CA2376AEE6B30C05DC1
6F9DB6781ED0F9D45D10E096C33B1B7CD12A9D57C6E49AD833C4B093DC82811F
16B3BD902BE764A1680831EC5A6C1CED84AE0DC0A65678EA5270BF20931E6409
7AA44EACB22CCA11098F8A51096BE83A1ABA56C9EED4195D5CCF24FDAD92E823
C439DAAFBFD652157D728F2754F28304710D3CB33763156D76A259D446647A11
493FAC70DD28063A4CDDA162F72542368E1AC2826C4BFF7109208F66371910C1
068F21779FC39DE03AECF1C9FB2F417930C22791961D801284DCC89B0833B6A8
D63F153ACBFB7B7D547924613BBCCAED37D90BAC5B0264ED31C7B9DA5A2BC620
9B20CA48424D0FF58905BCD6190BF4B5FC6ECCA1BCEF13426920197CAB41C4E6
E82E8EE7BCB23C6BA6F8B58001533B225ED721D6CE3D6E89116EC33CAA6E905A
649F8C6A1AA187A48E20DB864596481976216DB78F0F57543DFAE3CDC0A6FC77
2CAA49442527A5D94DC54BE93C875690CBE52EAA4EDD9F2A511361BC0F0807EE
96AD0D26B62D809E82EC14EDB158EF48A748A6FE0C3A7EE5D4479B35425F35AD
3EC7444F6FA75CEA5011AD571078293448A33C7647611CAEE87974B0A756DAC9
4E1BA78DEE477FA59AD50BF5C52E068A5E044A4A4994D5B24CC5045F768A3C51
D4F65E2A5AFD271A7666C6835E28C60751EE528C0742433165AFBE71562A3016
F59676D56B0B5F7E4984D664BC3ADDAF24B4205752EE21D4B57057A943018466
09C3FA5D2C5BCBFC22A643586BC9E7A965DC34C0A7D76A470B0602AE45106417
0701ACD2C764DDE218B924E38B5A13CB82678372E743A8B3CC300BCBBB878978
D9847F0640A031D5E76B5AD07699C3B2FC6C1DBBF79938BA649C152FFB2B5BBA
D18B9570670B99907506494F362B124790A17D4F415D8447ECF70B67DBD46643
91AD465A1852B804CBE65206EAAA38FFD2B4180AF00DBC62979F87BD3B70A8A2
C7C994B4FA24897D4F8CBC0D021D6F1B42B9BE470726AD1F8E04551231F475EB
9DEE98C52EC1E49F9B0AD307DDBF52E27B75C5FAC9C116C340A341472FDB4673
298B743504804D49A05EA9D086362D8B53CE1DA099DCE757093C0F5F94104370
94A9F96835BF61CD29F06E04DBC2EEFC26279D509FED5745F2FC8CB010573885
519A32C8AF740E24E511BEB8CFA7AF4D9033F21FADCC19CDFA1B93C3138F9846
FF0520EDCC63D2FD4479E2A40A8108F8EBF9ADFCECFD8D39B1B8097153685AC9
5C312EC92D878FDE0CC97890A2E32A2FDC1281904C719A847C5E4C09F5225401
5781EF72856EB32A20D72C162D4DB9B753026C1311352ED94B944B33C8B3E00D
6EEA4C136F9D440465107B10C19A7D8EF7CFBEA869A5C6AF8470101CC4A5B546
EEB352BE1995E77AB88B9BB827B994CD1E48C92D689E252AD423997AD0F470CE
D9C8890CA3A9BC49F5C300405D520297A9FF25B8EDC0CA98A9F1B7322BEC183A
55104448540303563309AF40F4FE8485CB16CE72E9B1C6B92B9EF98631204433
3B34C0A643B8A8D83EF9B8DDF7FBF60E6B0DF9BC64B0AE7023DC4A3EB703C2B2
784740F34087AB1DBB7453BD11059D274D38C6DFB09244156FE4267611A0C507
C8FD9B985F684F49F9FEAC6F7C9295F4DA2AB8ECD2726EC351FE1AFD43566B3F
55A2C76F337A8ABE49F5C7EE53CBA6CC2FEDCD5D5345C3760936B959A01746C3
9EF1CC1FA35CB9EA9EE4FA7360B286CE23F0AB9FE637266AB6FC2A17181C9947
6512B6332121E741324E8F3EF89A9C706F880584D5CDDA25AF0B6A11F71AB8DA
10F289224A9DA41D024FBC55871D438295EAC9FA3E1A11420A1AFB8B4C1B0BF5
5E684749561947713B52E0A4036BC657C6D1391702BA20CA7109148CD06A02DE
82627231AB49E355905D805121E4860D37FDCECE2760ED322B3231AE0396A744
2B1363A2F228E26C0C248B2073CB4702943BCBF3F5F618AA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%Version: 003.002
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A7E25D662ABB1542A8F8286AC328D0F7BA89C91617404C0FFFC8D013B9
64E824A7C9994BD6DF937BA9E490B349036995181A0898C3C8B012882ABEE024
336B9E08483101B851967A93975052C10963D8F1FE762AF25AECB904205846E9
3FB346833F594A726EA861348D44203C08BF5B48CC67196044099480C88B4F93
B7DC400211D34B5F516BC99C0DD5D3A52D55EB68F681FB62E7CEA6F02A9F64B3
E1D62D5AA2B64A601F63001E8D49FA9FF9B5AF737370B7275062A9A0F86E17F2
09DB8A8415F74423B688E5CDF0E21925DD83AD6B94AE3D200205D1DEC880E9FC
1FE530E6B1EA99AE190C73D84EECED7FAE82A2711279E93A4AC47E4B5F0B6D47
FD00EEE10664D7576AD620A6B62B624D2F9029B3926C8C7169282A00512CCA82
B8BEC7B87A4625B456285C2855B73860123841BE5240F2D45D263420E4E275A2
7C23B670A3B37D2001221EBF698031AE9E4CBD884D4994A72D8FED2CF707921E
F8D55CC5260CF623038F35936E161073FA4E12347F068211446B3717031B10B4
E91E833D7E73460CF3CFC6FB4AEFE0039BD0D3D940932F453D36116ADE01E690
FBF2928437F61664B703C87B1C744DB2833D97B36A2C2AEDA36659E615A15876
7DEFA6571BF949677B77EAEED668D4697A1B320FBA46D3D7A665E51D4F476131
075656270A536E5DC023A70034BE6E7BF95F663B61E79B79770A329AFAE34DFD
9E75EE4FFCD44F9242A83A4B52C8A850F8C1497765684F0CB942A24B58AACF59
67AD55AEB8D3826815912330262158767E442AD129924C76F83F8EC7FC81386F
8DFEC41957BF7FD484208BD08414475FFAC65AE1D57F2B01E9A5D66ADA67AF4B
CBC370281BAA989A80FE00F1EF7CBE10E1B13109EA3BDF439EF72A7C90CD9FDD
79072F345469B4D7F034AAB23A22940236B9C9FB937229537B4B361541500F0E
E590EE50089F30F3C4AD5DDA23872E41351B29F368DCB9A2CAF18A5291436C31
C202617702DF77D38C3DA5ED1C91AE440E8D00EBBED65115F7D605567AB47C1E
14D250D81B42989EDAB2488BFB444EB0E82320B21C4C688BA7C1E0DB8B2AB04C
4B6596992F1D71D62007641F5D9F9BCA6266A04793DF21D584A70357A7EA71ED
E17389B0BC874A1E1AD7540B99D207D275B767211BBCCE4663068F1279462012
5B9B7C3B642E67C09E3350AF06CBA60AC29B29AD74124A09F5D19B6E0031C320
E0CFE08D8DF081FB880D923E07EDFD6628973E7DE7A3C3D250F81A879757BD64
D5BFE01EF1944C069E11D06442D553076D70A607090EDC524AC951DE698D4252
3AB2E1F3B2F2106F493EACC3557AA7178AD9F41278F95BE4DDC0ABD597C50E8C
548A56990A9299E3CE5B8AE125FE6CE7A393A60DE0DB9626BD024314291B1655
E3489B0D6A7F8DBA5F4085493557D792B035423019ACEF3BE197046982C59E92
E7C97445A312477BC5D98A81B0C0C4F5D7870815C267DC850D8CF280619CA18F
C83FC2A5BEA3E9B1CDEBAF37B578886C1D2D78602AE4493644D5A846357FA4D7
B1B9BA76EDB29237740273B9B0094B3891BE53B08EB8CBB1A4127653B9CDB1C5
AF219CF42E285595E57A32BDCE1041193F8C1401A1B6C3688EFD9BED9CC201E1
47E3D6B1F41566BC55A31DA46E8A331EBBA6D3EAF17457AC41CA012BA0E30C59
3C85767C349F1FA72E7ACE6EE5F2EFB050BA5B627EFDC54A4EECA469B400ECC8
CD39E02C016982512AD84206ECC4FDAD0A037A0813BE300A5688FB2B03D33B5C
06AF1E6CD974133F9B20C71F7383412A3A8A1E2EE32CDC877DBCA54A2A6F72E1
767C52802723C2F8663800E632475D650FDB2636FFAB84F656740F6EAC0AB83D
D2EC34A0FA301E38847A601A74447655937BEBE625AE540FAF6C0446054C0C99
CD5F0B3D29D4D3EE84A29EE988F4E0E7C56C9320BFCF59C594BC3FA5470C7949
BE349895525A66433418EF70AC22C7286A52E021F844C8C2F6DA45A28CF39D17
DACAB811A4FFF0BCC03D3343B441C68FBC5D8BBB29631332BA2AB37F0F2BFB9A
8AE7F02F5F204C545298D120C8E5F4D6741C8F39A414A62B78F7C6D6F6453D52
443789CF94DE236583FBD983708EA2CC380B3D0F25D950232A22162A91AD7B7C
7E895048EC1D12FBB0A3E11DD931D305830245A26E4006C0DAA8383F3F963027
EDC2D6BF316AEEA142E8A4EB33974E4DFCF204478C27F19697DE95678494A3D3
856A3BA87A04E04AD72BB2E57C6A3CFD6848A21FDA91CFA309E889CE7B33D61B
96C2C575FD3BDDC6FD9CECBEF57B73
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%Version: 003.002
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 12 /beta put
dup 78 /N put
dup 80 /P put
dup 84 /T put
dup 102 /f put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D913FCF244BF664E52
6105E2DDFC0AF5591370BB319E653A6A2AA7FCD80CABD3F952FA948239E2D270
07F90D70B53E708525A5E6721D5E541D57004DD0410A4B82D2486695C8803258
8AC7251FF7CA534A979BF4A55AC27BCC4B4EF6473B3E3C89BB24CCC22CD3569C
CF967839E7BBB38FDCA7775A45951473775D643AC3387ECB14F9C65E633D6E5C
CB63220853B6CA998DDFBD0D03A6A5D5926D50A6BCB2209C7888A161703E3930
EAC85FCF6BE43856D1168D4DD9CEF30BF15BFDD4E9D9286D76544301D1BDEE12
CA4F9329DF16B672B07D3FE4E954461C5F18B658CCD7847C6D9F2A5F31330AF7
E83B69558062A3DDC28465BC17C850FFE3F711A4FF663C44225CB5438C2C9362
4AFB11731E04DBEFD34D0F218A5178BC6B4579A1A370D3538115693468CF8C89
2B75F4ACBB8B783E125C4C4ED11D0AF91380713531C82A74E783559A2DE3C613
6DC319749F0C5C8C282C2F188785AD0F281DCA363EE76C29EEE5799323B710A8
88FB42ADAACE4F2FE9B16FA9D13559131FEC79FB96C805FF275B780BD404E4BF
378B21507DA03479CBF1EE91C446D41AB459376D0F5FE4016EAF4AB99E20A926
167D364D720AA31ED47A801780A706FA088EF163B51136875BB7D70A81401C1F
1D129CD6F04F8E51B98837A90DFE95A5C75BE8F1F581608B2A890BD438558969
5A6F52B0406307DC997265806A877309C570C19CBBC34829EFB460402EE284F5
8478903BCF63543D243A156B17A13B390D0D66E33E6963E5D793A2C10299C1EE
EC40B34E5B0AB20F920E2DE220F50CABE7E0E7AFF50D818893892E85A4D38F63
A07A59464ADD0846D0D9E3285958BF83670DA444FB737F34B6FD719BDDEB8037
0DFE0E8659474AB555CFCEC246FB8A71167F39C0CFDF879A85D6C23665CB31FA
BDFD04959BFBD497F120E9B3EF5C4D28700F56CD9C17CAFF74C54B133491FD9A
D1069EA8E8389510B1234ABE078D745F0213C4B4E61C522A085F9478A76C8B18
08DCEF6682304AD051A12E9A20FDBCAC6CCB908366EB695E91356D947BA8A466
72BBCF49D8CA6583E9EEB69D578CCA964DF99594B6A8E438C1834FA37598BB0A
7D4CC542E4E459B5EC9AD4A85A734B994A3FE0EFE70F07E5023DE685D9E02291
FEE54186687B077AE52508E2AED1607EBD530502ABEECA18665E965FFB90B70F
611AA583DFB77288A48FBA4FB0F7EC77DC5D583174F6D34AEB36ED3B814E3811
70417C8DBD54149D9588A75E453A81162F65CD605AD998550DAABEA9D37569F3
75D79A434E119F85BA9FA3505093A93C0095BE5543C1096C8865165AE2F90F50
90BD866BD5CC64C4984FB5DE3EE48D328A2F7E2CCD726C84223D12574758E65E
D7B062E91176FAF05AD07CBD2205B02D4C6603B5D68EE76B8CE1989421C0E80F
5E01C48B4D37C337A7CFBE7E8FFD3D3A1549FA16F81788EBE33BC2AE6839909B
358B899AD587E6089EA72019CAF9F1C55B2CE029AC1EA634E34AA77ED0AF19CB
708723BC93A6D2EFE1528F73D7F2EEB19E4965379DF0815FF7169A99357DB2C9
0081B35EEA7409EC850E0D4C75FFD80776477EF06CE6C0173FE026EEAC5FBFA1
42CBEA3F89789AF5EEA790B729800B00B049548F9B6AC174256657E13E3CEB82
42E6FF93C5DE59BF72A55D48239D6DC83B7955F1C1650702D6E98078BE77C1A0
CED5C78A034FF6FD572C5FAA5970E5B8DE99C6BA3B4D1DED66A3F92D3C67662F
640EE7150E5AAE4F0FCD9CCBEB66A7AE674E752E5B66EED4F921646F9D6050F4
484F723FB2CD59FCADBA2E9DECAE3FBCD1AAEE4B728DD0CC4A08928D9EDCFFC7
C06535D0AF93A3CEC1B580EC4A6E5096F1349BC1364E612EBB3027DBF3DFA174
377F4DC76980A3FF1A2052E983C23E1B1A6BE6C70AD79948561E4C905EC67216
3038CA9A5E6D759324C9B1B2C46C79EF3CC68084FC98D80C594C2D9F0ED0D094
7CBDA431AF94A92AA055BB064C7853E5D79F666CC959499388C76A5C583526E8
B7E2EAB6EC6CC457F8A1089D1586CDC49C8E6F4BB689B4FE9DFD6B4D59F9F767
429C5FFB9712F1EE8EBC2C4A459EE6515A46A3F3CA216918564685BDAA8EED16
23E68ECEC8FCDBD35C1A127D9212E522FB4D2C959AA450BC5CB46A85A5E21E5E
C181EE8928F4E12D5AA97E7AF2DBF6C6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%Version: 003.002
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
dup 67 /C put
dup 78 /N put
dup 84 /T put
dup 86 /V put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD10B4729E5749A10EDBE644886443D1249
2C8517DF8D8AE98E2882439FA81903941B363A7D885F93C6DF9E1FD89F2F8CEE
B870C409ED13E78B4C914813B0A01DF8F876EDCC4F384055FD37C575726AD69F
F23D50EC5BEE2FB95A44F2B2E2DD94C933D90BED2C97B53738B4B2ED56EBE617
BEF17B9DF4F314A37F10FDE34C570D7BE76A496A58242F51E7321380CB042424
855F4B53071DF5A0DA5A31B8AAF9FB4F4C491625FF8FD008BD4402918043BEDF
77B840B2BE0DAAB4EF904FFEF935954AFB9BD2041241B1BC8519EB642C89E288
479664226DBB6F1171F9EEBC7E1273D0CABCF6B1BF7F26AF21C21D9B1B916F4F
603DDB68D3614B86566FC91D67AC3F4A4A96E256FA1A3BD35F4465AE4EC64D82
34BEB4BBDDCEEBD9A89D932E55F14CA2776F927C4FD3E0920790A57DAEA08C5B
169A3E2309DA6BA8684A5D1DEE81415796E13DCF906FCDADB092047831B16841
B250CD148557D72DD7E683BF122B38E2C4F614E59B395D1D9823D7D5F126D932
14B50A37FCA7120F8F3A8E42134F1B6B0C248D56F247AA68FB941839F600F61C
14247EFF780BBA3E5198D37CED44DEEC3455048FC451BCDB48DC414AE5293A60
5A59877D6A42FA7AF1CD28488C1FA0A2D5D57551A68A6479A8FFA785C2BD2D32
BB5F20CFCD667AB094E382D582BEAD23DF0A82CC481E2DF2F7B0CE752DB13736
3373816937321F70D50D6D61F24053B2D53F0D9433CD9F0A33FE83C973E627DD
0CCC64457AF3C439E130540FBCBC2D0CB410A2986BD4A7B118FC52BD298B1DE6
26D7348E9A27E721E0DB58AE8034A64BE77A35CA8567EE7B87B270052843D6B4
46C3B8817FF88202F88F36C41EE1C42B5BE295014645895872580E379881BE7C
CD90FFDA7BB3B40A6386A75CC6DC32B110F005A191549DF2F43E7D52E442E8A7
945D1DF17FA4A20F18140F4C14D8719DE497FC97A9D171AEC4C9FF966EB2A72B
35A074D10C98256868B461E056C6A78047ACD0F86DDAA2DE1EF3C6CA054ED739
43131131ECEE2A39FAE6EE293844EEDE173452C0642746FD2A9EC08ECC3F08B5
6E85648F42FC8573EAB04A3356958455286C1A02208B0355D14C218D571C3EB1
A050306F1A27C8E215F5894EAE38B79395F23CEA0624BAF427A30EB6E92993B9
DC53E690A5557FB4E93ABE9F95A4D76117CA26949D3FE6160074A98F5E9039E7
79B826B047A5B9FB43E3B96CB32927A36FF5B9354A2DF97AEE0D09A156F4D61E
BFAD51DE7C311530920A93FD6EC3E470330AAE465EC3B744AEE2F5C10C12018C
E74015A5F973442115232482E21867B22A7AC4887D3E82F32C16064A2684EC7E
78E1AB35E2D841DC068CAC8FF7F05E627E42F2B701DF842CD80161A57CC3A2F4
7F997C4288AA1C8CDA5E3C6F89AD4B0309808BF57FD24038848D6697C68C5194
87D2C0D18EFC778584AF39D2814139E38C4BCAE9E1CD3174CFDDA0974B9FAD12
5502A33F3E65A94AC101903963A84EBD442A298F148A17EF4A4CD214B123B211
2202761FBF8ED90C36858E64403E0894616BBD9691E64833B16F5BD6E4B65B1B
D866436AA7E2D2C09DDEBD95B89FEE748C24A37E511A043B25D4477B713B015A
306F1EEFB6694AA32B27B7064EAAE94F0FEC6437B6B4E988A1B47C8ACA432275
739721976F0D03471086549519212098D94298EEBD3EED8A0E8892BB78D04AE4
133AFFD328AAB9F195A0F1C4E9BC10E3F6634141A65185648E67F28A86E8AC68
9C1918C03E8A3F98100A686ADB740C45D0CB167BEB8857F79C1F86352211F2BB
BF036255E83C9F847EC2351997F4F85D0762327E1353649873CACAF6F08C1C16
A1ECDFF54FEFEF9B540A99B60868D8D3CEB7C2BFEBDE09BC866ED9AA11865B53
8D351174CA94DA51B8108E5BA74548B4769A0AED35C6A162A2F8042E0762A936
0B239F5407670A26DB1F7F5D67C4D22790BCD0F1E868456204DE3F6F1EAF14CC
B7901A3C1C54A705AE4325CB0CB8C0D4B64A6799C8449E97E13CA0AAAB196E8D
DDEC0A6F0FA98EAF74A87B9A62FE907F9F047272F59B626A0A86E2A3664081E3
8D43DD36E8252C7424120BBCB1872EFAA90AD207E93373736FF86328A93773D3
D9BFFDC6716D12AF51EFBB9410BC7408558E909EE979087A235A3586E7B93E6C
B91FCA6382226C92B9537DF8C4F37383902B4E1662256E96BC1C1E95DEC7CD47
FC235E96D3BB3D354DE81AB7CD100039346F91568267DBB3B5AAD9AF33542223
01F3ED3E14122991E7DFCCE4922C000B0533A22FF7F730A1DF211A3795A93EC8
F9EB7F8377C746DD71C8690B68C521317C9AF92B579720B119FD2C263BE7BC40
550DBD4758010F77135B3320E2003E221D65112E069F628D45A0AAF0202885FF
6B4AEAA7747249237157219D7961954D49CE14FD2A166B433AB705049F181616
6FFE8496B76E5248A3CBA43610EF3B41E58B2A7BBEF0D1DD9B4D16E2B08B8A59
9A6B7140C42CFF1589F768C9661A027E078AAF9E2F7A5ECA274083237775F1FC
6951B2F385906496758B6544ABA27E2050A1547ECC7FAAC1BDF0D64FAB04CCEC
AC1EA93988BE254E865898634CB76E8624517ABC1951B2F5FEB44F59C055C5D6
087F1FE341BA8B7E8E345F81A6863581424EC3694F8C17F5C472D44DB640E6C7
E69F44C88799A46781475B913C3C569CD3B0EC81AF9F6DE6C54EC954405B5D41
BFE5DEA04F4B6B420E0A9812DC97B14EE699630BC168544FC932306DF2C65642
38CC376B60F312DEC324B31B9925463626648DD1F19166A2A9D936AC26E84124
A3DCF8C28E4463E0CFCE3776CD8B62AE6FE12DD1DC46B921D8BAF03715FC56EF
69163B0A90C002203AD8FEB9A3EC1859FB3D8654BA1A537790350E19F6D5C847
C84253F36576B5BFB163252BEBF1BD3FAAA0C068D11E98300F65B6F665DC1F1B
9E1DE1C50C1C3C86FF3242AD35C5B3A99045B99EC805E25F46A0C1D1CF007F83
B5AC7829017B484553D7C7E5685138A06386CC3FB02BFD3C100E7A65751929D0
797D1C23EE030D8C58153E4C2D0977265870EAC015A3096905876A0987F46310
22FB5658F5B8308017B28108BDE93EF61A4667BAD34CB4D5D5F36E28DADB4698
39BAA875A6FBAD1E171AE3D8544ABB5996560AF481C9E9BD492EC88BB1CB3572
CA7C2A23F8D4AC42C231CE55AEF07E94A0240E159B69989299C4971009EA8D36
1F76046435F30D120FF9312B625CBFF10A27E2B9F858F2A4D0AE9018706818D9
5D20B6501C98C38B8168112F9E4CD7D67E335CD1D4CB26193D06F753FC3BD99F
AADD474F23DE906C129679CFDC5F037D66D450FDF5318A60536DCC4F9E890C18
E8E4AA4B404CB08B7DB3B270BCD5F146D480050FB9734E92EE2D81D708B1BD18
BB98B50682EB172AF785309A86BB40E157B7D8F2496EA6335340139298877221
F8FA4AA0EF45CBC3C10773D8063733350BEDA3F13D117E37D9EBFC106E8DF4D9
DA854F4837648D02C053B65521DE057CE929F905A396702C8DED2BA6A6011223
12D640A28E2FD191D39B6A906EF1099DA1BF5D6BEA1DBA9FD950A59116A399ED
AF32BB5631E179759A034F8C397A34C42CB977A3CCD90B96ED207BDDE15B51EB
C26F04A92E0F947A049F85C480380B41079089FF68D277777AD2F477516B6676
A165AE58B26B9DE118489A37A541ECFFC41F3DD3FD2EBD84B672F4AA1A8DBB0A
4ADD4F4245DCD8BE40617E42D59AA5F3415CC18F8CF3B41AFFB66DB183109EAA
0BEA3074AD5A6A9B3528D9EEFC7FCFF15F02AF0541118558248D761F5D19584A
456330D688DA5EFD2F7D9B4A34B1FBF312DD662A62C9B47FEEE66D056423FDAA
1B6CBE4C5F35786F1604DDCC1DF064D9B2364A8E59A74F13B01343474F23A9F1
0B70C6D46F945414CFE9E4E492A2930768FE6AFE6D280B276A4BFF1C66EFF3BD
A607C0432D138A3DFD2E4DCC3AAD98833C11ED6B57BF9F3E23B75603084951C4
0E523A097052F5FC64689EAD9A0A611C4354AA0B123F49DDD04D593FEAA57CE6
78CCFB849C4DC30DC04386168011A42F94C7F3B198911B8FA6944DAEC9A3D28B
D98026FED36B87EEA021E065BE682B615E12D431B9C4D3CC91DA2BF685AD14AE
09E4B3FA90168ED38F07AFB48EDD0700BCECEB698D2EDCDEB9176F1869901624
0872663A2C790A827A310BFBBFC95FEF56247333C915F273CA817AB0E8641234
AD9B6D51648AFBFEF5FEFACFFA1D149A1EE1DED65CD3368F8D713B0889612692
4DDD0B3A482097F3D8CA47AABE6D253B04BFD93DBFAE51FF72C6D32E124470C9
2D7236CD1D1973960C3A3E8E36F59A94A7D17CC620E58566BB2B10875BF158CF
A3C1FE5781354E7A3A25CABE54BAB0B8B88FC849CCA3AF6729D612A45A9F3851
2767E5F27196E33125BC45B5559A6738E687AF6EA7ECD1B3DD32E2E061D98E0C
6673F0D57BC0FC34D73D02836AF262882F47BE7BFB1840D7C7F105B1ACCB85D1
847B1E4F59F97F2A13C267594FA29656C1B820F9ED7EC277BAB6B053971A4BDC
FCBE5D49AA58967546CF23C6033E6F877FC111EF23E47FA388D2420614E10346
208E2DC0CB252E9D651FBD039488CC2B543F4B93CE4478FB63C6B8EC9A4F3DA8
51785656C1BF56823611CF745FBC420716943B5B75F0F0B14E5AD63024340D93
08C9974134EA2348C8F619F8A9D94719F604EA68B1AE3237AD6422E03B567AB1
E25B6E46A1BCAF97A6E9858348A6F8C4FEE9527E0B75B4F1AADB863AE1D12AA3
8F6489D032F32F01CEB2F281A681528932F66207DA6E1D5368E646D7F7BA4DBE
EFB078AB191F0B0838D08E1E3A8ACFEE30FCDB0741702B8E45960515CCC30DA0
6DABC7A5294DE5FC7846ADF2849B4596A4BC09D4C3E510EE2F4FB7B73D7D9811
38D3582C87BD1EA521045E1E031369A462168B9D25FECEAB7AD71F2020034690
68A5BD8C9CBA0D46703E6D9A84C9B339D57C2247D64AB13625077B53016B2C5F
8D43DDA5B844F9A6FBE9BA9DCFC74463D67278548717D35767BD79E6D8804DFC
6D42A1DCBC2490D9A33487DFEA44B7D9D9AE5975615249FABCC1F190FF828E50
E47E0CA3685D5F75958491E0CC72E3CAC7F7A5473E09194289DAF6A9CA507A49
0A82B6322103AF0E138CBFB3724047BCD244F66C9CD11820D375EB9335616F79
1A39B9707F39FCFF3DC9BC72A70BAFF6482CE569F703BDB46F7DDD5E1FDEA7BF
D72376B3D2A6C007D297F0BAF6A34580651325979E5DAB6E8A0D03C4236F3617
77E48611708DEA85A19B651BD875F812F1B050FA9E1FC493168234C424B46E14
3F7C6DD401104AB6AF6839C8D9A7567E16FF55146D4BDAF359981ED5810A4BF6
3C71DCF71C06CCAADB8903851F413C3E6A5EFEEBE0CE1C54D9824A66A5E3BD8F
BA34A9D0970734A8DAEE25AC06FA48A7F28F049C1AA0148D4E271AA1609B90F8
0A589C2C8ED5D8219590F49EA9565B067EDA7AB0708C3D092B3447222B79091A
9224910F46FAEC7DA87863E3BC208A260379C10CC85D8C2DC3633334945F3B93
1E5DA00143E1378F6BFA4B3F930006F6172C0730E416CB45204722A5A41B7BA7
F526099C13701CE7BDB9752F31C218B2BEEA541E5789D9CE1EA117F0E78ACD9D
DC1FB1FC742167A06FA19E7BA142DA027564C309D358E8719CBB3730DCF15832
35CBD18E3B0CE768240F0E8C2143C4128439C3CDDBC23311AF06CA6417683153
E2AEAB85FEE33C0CC721A32E8A98F0CA94CB23906A984637E9D32C20BF255FA0
8F296137130DE184AD643E4B6A8E7326B711B3F7728B7584952381196BB80935
15DBFAD5C3942CACC15E8B94B4EB0ABFEFDF550D17AA7ED4EDB7CEE75B29CF88
6407FB6563C4F64F463672BFFE79BB6D99136B7E27C33A174D64BFA1965920E1
8C3A7D6F8C532EBE3039EB3965D9AC8FD2EFEFE0596C0AF36CE478253E5CC68D
D1EF958EBF26506518912A01FB00558E4AE724EE3321491BC8F34DDDDE6033BE
3F9110921DF026220EDC3B66014D45AE407351F0F68C962407AC047856AE45E1
97E124DC086D981CA4BE93E4B980B91CBF086F2A2DC2AD19628A35BFE52483D7
D29B1183F6C9F94DFFE12A0EBAE828FADD77018AC44E4CE987705F037E2C1ADF
ADE5B316D0686212A4BAE7E06756106D79774BC34B39231334F61050BF59552E
761268A3403E9C8387C2D8C2DCEF28C5513AF0DDC9932665B54A3C2CD94A1F15
B7364FE536009C49B8838296297979565E26C50D0861012CB99678532D419BD6
39915C2DD657BAB9FEDB43C9F48BFC6C899AC9BA2F3E597568CB867E91D0B51D
BF1ABDA9F7F01A82F1077D35A1C98C2C6683AAB95465BAFDBE642C963411B8B4
B5AA2CDC57C69AA60AF440D105688E4981B2BC4CC67D68C0B0D7DE53E95B2EE9
80057668AA4CAB6E9DF8C3BA1F332DD0EFEB820FA462027B5DBB842978ECC8A6
8F203B98BD9712356C90B9430E4151934CA41CB71D8253E6F8FA7A0060A2CA63
C4E4C20C931B92062BFE968EA1EF810A7BE97BAB42BFB40B774D402ECA511602
17C411FA4B066E0DEAF50BCB94973650054BC6EF1BE2C9708C2DE8A76E0E14E9
0931EE4ED98BDD871CA8E48FE979D013C7369E6E50B36087ACE43042153EDBAF
DA1FA627B84F14A2F526481ECCFE61A703A0AE3C7883414C6CB01F0227562638
873A1EEF1BB71DE6C221535A8D82B27FD3F2E2AC591D9EFBF647FD3D3FA7CBCB
88DCA03418C67A7DF6A389FE7957C795DC076E30906D9A67FA5BCFF81708E8BD
C672814F9881D996DCA1B962BF94226D31F0D902D9029630910D6F5CDF01AC82
2DEBCFD71F3DA042F61575B1EE0D03F7EAF43E0E832EA46E557051E88059E57C
B60EE69EAA51352310173A8D436CF642639EAB2A9854626B2F44A9EA1B5CD00E
A71230CBDE6A7694A1F571F1DAD103C27C131B64763BC4342925356B746CC89D
6D20A84F481DD03B5467BAF5BF76F86714198DCEEE10E8EA1ACC35CBC63BEF23
88B80BF3BAC3B4416178DE572CF97CF542BCFD2B870F844BC0D57BDFB2B00830
1BD801F1F88FE82190EE84DA02844C8D3D657A23FB2570FD7B91114C929D7A5B
97145417FB0DB4B5FB4869A5C72EE900BFD6682063DBF7ECDE7B31A1AF0C131E
527A75F5BBF32D3228A1A07D02223D7AB2C3EE52A22C86A4B7B0F87F0DE04832
4041F0F35C71D0AD7FD86EAD8E1441B89569167D571113027829973FBFE65951
B5F6B80C898B66F5ED13A023A87A51A0485EAE87122DC4DF773862CF588C3D19
F20893CE4ED7D66E191A1C662CCE8EFC6E288DBC3C623730BCDEBC6AA9DB1784
EE317FC42EDA251FB6F87466ACD84E2B4BB95CD274527553548F7F3D01BBB4B4
081EE0DB69263EE1C9A9801C0D5A5C5C7E5FEE5F8004B7159FFAA882DF3342FB
C92D96FA45683D3AAEA8E86F451118B10FB7D1B3E1A19C4927235FD4827E2069
A40E4FAA46227A3C14C5D389931FBAF50B9C96F376A8B70C3EAF948854343221
54CAD263182BD1D3F5436BB2C1ACE8D3AA3304E77A35AA96F496CDE88EA108A5
B60ED6EDC568574EFBE4AA1C11DBE0ABAE552E435C88DD908165E5CD22D1184D
3116B63299D70B367CFC9C76862F48E21AB2D6D7ED09DBED94FC365CC74AB2C4
2B1FDC973001E7942296A5E8DE7B88087B813AA22B410D8FBC910DDB8A8BF641
42D62BD276CBC75FE2DC803E1203A9EBE061ED9990E1F12366C7D0AF98D19422
46E2A6308A706B93DBAC826C273DDD7701B0BED83D8023C76769303E5B302300
A1E3AA1756B2B42D3FDE9E9245943A23C49ED21B0A307D98FF47222756479A8D
5FBDC08015DB084A263AA9EA437FF8CE4F7F484ECD2DF85585590F1284EFC0FD
D29FF37C525AF651006E0A86B36AAD51E49D3BFB997078A050C2BFAB64C259E2
27D86FB436EC699D4373E258681223ED59BE725EC09D42034D9FD22F4AE68455
769EC2C44150D8EF9B4D8048FC2AE95FF88CC7F16785983D36F70FB1052DBC29
AB85CB74E457DBDC593CF3CBAB0D2C842B65C176C2A5350387C52CBCA6C94F1C
41E86487274295D7295B60C98C1A1544AFE1D227C9B71716A55A1607A1C2C4A8
A43028995DCC3417C595710A56220FBFD99338148375F70B05966E3047C69095
5962A30EF6AFCEC4CFC25E9CD478B84275100B5AEEFAF3ED117B54B82A13197C
F8F595F155F684FE72CB18D7BB56B1149AFC3935BEF6EE8DCBA8B384B0F9FB30
50BC517841733D64494690931ADF5C3FBF1DC9D38C43F2DE8DD8D4E472F801CF
A455F3E40696C32A8CFB11CA32C48DD8AEE80A75D1D6C06132C07F0FAE895A2B
1AF332287DA32D6692B98FF0B8CBB8AC54A3F600C39A338CC250F9AAE458C551
A01B79E9971E10B2B4E586B329310B981CED6FBA6B3D915D0121C1E4CB7843BC
A7EB8B0EAA80042A8F97E4F70FED976F7AC07A7A0C5C29AF26BB20EAF7D1F773
20838AA2197F30810A01B92AC3C37BE21836B8BB871CC3806D8DA1FD3A50886B
9E851EA588A7E8F9CC4A2E43DC1CF27570A5A922FD47DC9D9976D3ED703379C7
043B47E9585739C9365C60051C8D797B84006E17A9368316D30F3EE75FE958D6
C484982F821C28ECD4340F4CA128297697B6930C063793CFB1B790BCB95464F0
3FDEFF41C0715F834030359A25E01D0094528AB58E7AB5445D7057C5CCC14A88
738E82ADD0AEBC579B21D1AA5F1B854737CEA1D74900F2F1FEF1A806E7E57681
B347A5FE3015F5E6D6CCAE0C306506A951E384F993CCCCEBB939F1894361E6B0
60CA9853570875F798BBA964B97FAD17A0BDDE87D3F5AC70E698CFE273CFCF84
C7E11D8D5429E70CBE3A1F13FA5DB2C998FEF63E95D117CDD2E495A6B07E4BAD
3A884D672D1546F0487A1B3785A025B6FB94863BC42BF9790A3A0BA009674D39
73F49EA54A95E47E2C1DB1B0E54131CC01D19F37ADA840BDA870DD17EE51B697
84B0272698464EE99320738C38E565FCD834832DB81DFDE2645458F781186D49
D58E9536A68874F569209A7D12AE0DE672569D3A2120BF7D8834617E23F7DBDD
89C53A9A595B566A45F0936F5E279491CD737925A056F960C81CAF9B525CB89B
28418B6905960B701C3BFF168CAB165EBAAFDD956D16EAA2DFCA9D597A37F566
A827400EDE6908A31D0797C7D0DFBDC8556D496E287B538BD70D5CC74484C899
45F87B3CF67902DEFD6E7A0F41E12E944E80D81C78B4989C209BED3A04B9D6D9
036D1570B5F0793B071AEF9776AF0A2CD773DE8E73930C3FAE0EE840F8DA10B2
C604C0AF5C3D3F117F20B8512A796D0B475861EA3A5D7C8DC868F1F196E3C9CA
E787076A59BA71D71C55C165C7824764BEA12CD9C0BB34AA81D923B929A5A3DA
1847ECB888370B9ED0E8F7FAF1E8EE381571CB04176C2E226E89E4FEB2F8AAE0
8A9481BC7C24565112972C962C141105321FB7D50284860A8999BE55BCF94B26
1216F643A78D15A57A44E05826DE35E659214DB3D59D4C8E3CC167486039E014
C1DAEDBFC9C1A6A6FD3B55ED247B753B72DC0365C38B48B370A41AEE6DF79087
614D707D50F7913252FA6B66CE78952D545A8B9A874C7234971B38BFA848251C
43B347E54F0E5D769222D1A8332499CDF04F1D572B0E1622A52D28584AFA9041
07CEB081F8818824612D313350A88755CC0567C310551B93B8D58DB23738C504
63D35E26ECB3BBF4CBB1AA7B15FCF5EBF261B495ACE3A64F19E75E785BB88B5A
838C15BC2A42EF140FA0281AE65E92DAC57098AE1F2269C667FDBB3E6CA04F6D
F9B1CE2A48E0048E4918923DFFDC0AE26DD18348C37BD5EB8D7CDCCB143B8A94
263AF83B391145E2BD542C2E0814390A7B0B914B09EC8261603F8825518160C3
52A645C7CD1C4A6343D363DC3623F680C3CE2958BDBBB5A47C0AF892D03D6071
179807C780C3C8348CDB09FAB631BAB25041914E73DC84A036EFAE9735A6A26A
72CD98B2C09F50746D0E02AEE4CA5C3BAA6596432E3CC62653B9E14D00834D98
77EC8040FE553E6B26F73F226569637BDBA757E8BFD72989A31D0406892074BC
0F420EF44E2D78A3CF83D9986E30E6B2FAC1FAC02BEE5C98822C335F19A783B9
8ED4FE60255485D3C84B1D2D76659496ACA8C2D34C3D1846D328FD63A1D3A0AF
7BCC25BF5B89BE22862F181C6AEE8CD1A1CA34B34349031B3DC80999E1E48348
592F731740BF5A1CFBEA4F0AA7BCD1AB0E1D307FF1614AFC9F609088B455C900
5FEB0D86229B0406D14EFBE4EB63517BD31BAC4E9264E2CE6158E4C3FC3E6F37
8CA60A212993994E385B54E9C7962C3CD8E6FE317074BE4AD68EAC4C157B1C6D
E013698F3B174099E922A38F3A03797046E95CCADB66779B82CE5F9EC0E991DC
E3C26EB7875A8A27449DA7E47C3E4161DC2EC748A8295D20
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
TeXDict begin 31081512 14223406 1000 600 600 (tmpPSFile)
@start /Fa 153[32 2[30 14[39 84[{}3 58.1154 /CMMI7 rf
/Fb 199[33 33 33 33 33 33 33 33 33 48[{}9 58.1154 /CMR7
rf /Fc 153[41 17[49 3[53 1[67 65[47 53 11[{}6 83.022
/CMMI10 rf /Fd 139[32 33 33 2[42 46 1[23 2[23 46 1[25
37 46 37 1[42 10[62 1[60 5[62 10[60 5[65 3[42 42 42 42
42 42 42 42 42 42 4[65 43[{}29 83.022 /CMR10 rf end
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-720 -576 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -720
-576 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -595 1178
a
tx@Dict begin CP CP translate 1.0  1.0  scale NET  end
 -595 1178 a -568 301 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.13791
SLW 0 0.8 0.2  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
129.58727 65.82518 137.32129 66.68959 145.35141 73.26529 139.29106
77.51523   false /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse
def BezierNArray n 1 eq { pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n
4 sub 3 idiv { 6 2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll
ArrowB /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul
def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1
sub 3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub
cy sub by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add
cx t0 mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul
add y0 add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay
t 3 exp mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos} {ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi
}{ 1. } ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def
/t GetArrowPos def /t0 t 0.95 mul def getValues ArrowInside pop pop
pop pop } repeat x1 y1 x2 y2 x3 y3 curveto } ifelse   gsave 1.13791
SLW 0 0.8 0.2  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0
 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.13791
SLW 0 0.8 0.2  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
76.38078 88.01828 71.59554 95.99588 75.35748 103.99431 82.1012 101.6998
  false /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
BezierNArray n 1 eq { pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n 4 sub
3 idiv { 6 2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos} {ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi
}{ 1. } ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def
/t GetArrowPos def /t0 t 0.95 mul def getValues ArrowInside pop pop
pop pop } repeat x1 y1 x2 y2 x3 y3 curveto } ifelse   gsave 1.13791
SLW 0 0.8 0.2  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0
 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 10.52737 60.43124 56.05193
26.28804 124.33835 37.66896 147.10063 60.43124 101.57649 94.57445 44.671
94.57445 10.52737 60.43124   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 10.52737 -19.23651
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 147.10063 -19.23651
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 124.33835 -41.99835
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0.4 0  setrgbcolor  [ 56.05193
-53.37971   false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 44.671 14.90668 
 false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 101.57649 14.90668
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 56.05193 26.28804
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 10.52737 60.43124
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 44.671 94.57445 
 false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 101.57649 94.57445
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 147.10063 60.43124
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 124.33835 37.66896
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 147.10063 60.43124 147.10063
-19.23651 124.33835 -41.99835 56.05193 -53.37971 10.52737 -19.23651
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 124.33835 -41.99835 124.33835
37.66896   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 56.05193 -53.37971 56.05193
26.28804   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 10.52737 -19.23651 10.52737
60.43124   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 44.671 14.90668 10.52737 -19.23651
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap [  5.01881
 3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 147.10063 -19.23651 101.57649
14.90668 44.671 14.90668   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 101.57649 94.57445 101.57649
14.90668   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 44.671 94.57445 44.671 14.90668
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap [  5.01881
 3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.4 0.4 0.4  setrgbcolor  [ 74.26167
34.82396   false NArray  /DS 8.5359 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0.6 0  setrgbcolor  [ 188.07265
-102.03366   false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0.6 0  setrgbcolor  [ 54.91357
-53.37971   false NArray  /DS 8.5359 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.4 0.4 0.4  setrgbcolor  [ 106.69778
-101.46492   false NArray  /DS 8.5359 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial -568 301 a
tx@Dict begin { 111.81906 -105.44829 } PutCoor PutBegin  end
 -568 301 a Fd(Cell)28
b(cen)n(ter)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.8 0 0  setrgbcolor  [ 171.00082
-102.03366   false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 0.8  setrgbcolor  [ 179.53673
-102.03366   false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 123.20042 -41.99835 73.69249
33.11685 57.18985 -51.67262   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 75.96877 -16.39105
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 75.39958 30.27141 75.39958
30.84059 75.96877 -17.5294 56.62111 -52.24136   /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 123.7696 -42.56754 77.10712
-17.5294   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.13791
SLW 1 0.6 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
77.10712 -39.15334 57.18985 -51.67262   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.4  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 1 0.6 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.13791
SLW 1 0.6 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
84.50467 -35.73915 77.10712 -18.66733   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.4  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 1 0.6 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.13791
SLW 1 0.6 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
82.79758 -12.97687 75.39958 31.40933   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 1.50565 2.0  CLW mul add dup 1.4  mul exch 0.0 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 1 0.6 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 169.8629 60.43124 215.38747
26.28804 283.67387 37.66896 306.43616 60.43124 260.9116 94.57445 204.00612
94.57445 169.8629 60.43124   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.8 0 0  setrgbcolor  [ 169.8629
-19.23651   false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 306.43616 -19.23651
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 283.67387 -41.99835
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0.4 0  setrgbcolor  [ 215.38747
-53.37971   false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 204.00612 14.90668
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 260.9116 14.90668
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 215.38747 26.28804
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 169.8629 60.43124
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 204.00612 94.57445
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 260.9116 94.57445
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 306.43616 60.43124
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 283.67387 37.66896
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 306.43616 60.43124 306.43616
-19.23651 283.67387 -41.99835 215.38747 -53.37971 169.8629 -19.23651
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 283.67387 -41.99835 283.67387
37.66896   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 215.38747 -53.37971 215.38747
26.28804   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 169.8629 -19.23651 169.8629
60.43124   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 204.00612 14.90668 169.8629
-19.23651   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 306.43616 -19.23651 260.9116
14.90668 204.00612 14.90668   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 260.9116 94.57445 260.9116
14.90668   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 204.00612 94.57445 204.00612
14.90668   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.4 0.4 0.4  setrgbcolor  [ 233.59721
34.82396   false NArray  /DS 8.5359 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0.6 0  setrgbcolor  [ 214.24911
-53.37971   false NArray  /DS 8.5359 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 282.53552 -41.99835 233.02803
33.11685 216.52539 -51.67262   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 235.3043 -16.39105
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 234.73512 30.27141 234.73512
30.84059 235.3043 -17.5294 215.9562 -52.24136   /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 283.1047 -42.56754 236.44221
-17.5294   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.13791
SLW 0.8 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
243.84021 -35.73915 236.44221 -18.66733   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.4  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 0.8 0 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.13791
SLW 0.8 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
242.13269 -12.97687 234.73512 31.40933   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.4  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 0.8 0 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 329.19844 60.43124 374.72258
26.28804 443.00941 37.66896 465.77127 60.43124 420.24713 94.57445 363.34164
94.57445 329.19844 60.43124   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 329.19844 -19.23651
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 465.77127 -19.23651
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 443.00941 -41.99835
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0.4 0  setrgbcolor  [ 374.72258
-53.37971   false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 363.34164 14.90668
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 420.24713 14.90668
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 374.72258 26.28804
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 329.19844 60.43124
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0.2 0.8  setrgbcolor  [ 363.34164
94.57445   false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 420.24713 94.57445
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 465.77127 60.43124
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 443.00941 37.66896
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 465.77127 60.43124 465.77127
-19.23651 443.00941 -41.99835 374.72258 -53.37971 329.19844 -19.23651
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 443.00941 -41.99835 443.00941
37.66896   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 374.72258 -53.37971 374.72258
26.28804   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 329.19844 -19.23651 329.19844
60.43124   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 363.34164 14.90668 329.19844
-19.23651   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 465.77127 -19.23651 420.24713
14.90668 363.34164 14.90668   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 420.24713 94.57445 420.24713
14.90668   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 363.34164 94.57445 363.34164
14.90668   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.4 0.4 0.4  setrgbcolor  [ 392.93231
34.82396   false NArray  /DS 8.5359 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0.6 0  setrgbcolor  [ 373.58466
-53.37971   false NArray  /DS 8.5359 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 441.87106 -41.99835 392.36313
33.11685 375.86093 -51.67262   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 394.6394 -16.39105
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 394.07066 30.27141 394.07066
30.84059 394.6394 -17.5294 375.29175 -52.24136   /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 442.44025 -42.56754 395.77776
-17.5294   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.13791
SLW 0 0 0.8  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
401.46822 -12.97687 394.07066 31.40933   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.4  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 0 0 0.8  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -568 301 a
tx@Dict begin { 197.17729 -104.8791 } PutCoor PutBegin  end
 -568 301 a Fd(V)-7
b(ertices)28 b(of)f(in)n(terest)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a
-568 301 a
tx@Dict begin { 129.46007 -70.4511 } PutCoor PutBegin  end
 -568 301 a Fd(T)-7 b(etrahedron)26 b(of)i(in)n(terest)f
Fc(T)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56917
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
225.0613 -34.03162 190.34892 -27.77242 189.21056 -51.10344 164.74118
-62.48436   false /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse
def BezierNArray n 1 eq { pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n
4 sub 3 idiv { 6 2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll
ArrowB /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul
def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1
sub 3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub
cy sub by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add
cx t0 mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul
add y0 add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay
t 3 exp mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos} {ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi
}{ 1. } ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def
/t GetArrowPos def /t0 t 0.95 mul def getValues ArrowInside pop pop
pop pop } repeat x1 y1 x2 y2 x3 y3 curveto } ifelse   gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial -568 301 a
tx@Dict begin { 63.4495 -63.05354 } PutCoor PutBegin  end
 -568 301 a -12 x Fd(N)-506 301
y Fb(0)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a -568 301 a
tx@Dict begin { 85.07385 -40.86043 } PutCoor PutBegin  end
 -568 301 a -24
x Fd(N)-506 289 y Fa(f)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a -568 301
a
tx@Dict begin { 85.6426 -10.70059 } PutCoor PutBegin  end
 -568 301 a -12 x Fd(N)-506 301 y Fa(c)-568 301 y
tx@Dict begin  PutEnd  end
 -568
301 a -568 301 a
tx@Dict begin { 242.13269 -5.01013 } PutCoor PutBegin  end
 -568 301 a -12 x Fd(N)-506 301 y Fa(c)-568
301 y
tx@Dict begin  PutEnd  end
 -568 301 a -568 301 a
tx@Dict begin { 244.97813 -38.01498 } PutCoor PutBegin  end
 -568 301 a -24 x Fd(N)-506
289 y Fa(f)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a -568 301 a
tx@Dict begin { 401.46822 -7.85515 } PutCoor PutBegin  end
 -568 301
a -12 x Fd(N)-506 301 y Fa(c)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.13791
SLW 0.8 0 0.2  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
230.18259 -15.82188 203.43694 -1.02676 190.34892 -6.71722 171.57 -18.66733
  false /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
BezierNArray n 1 eq { pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n 4 sub
3 idiv { 6 2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos} {ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi
}{ 1. } ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def
/t GetArrowPos def /t0 t 0.95 mul def getValues ArrowInside pop pop
pop pop } repeat x1 y1 x2 y2 x3 y3 curveto } ifelse   gsave 1.13791
SLW 0.8 0 0.2  setrgbcolor  1. .setopacityalpha   3.01129 1 DotLine
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.13791
SLW 0.8 0 0.2  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
230.18259 37.66896 194.14734 40.85565 180.7198 24.35301 171.00082 -18.66733
  false /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
BezierNArray n 1 eq { pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n 4 sub
3 idiv { 6 2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos} {ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi
}{ 1. } ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def
/t GetArrowPos def /t0 t 0.95 mul def getValues ArrowInside pop pop
pop pop } repeat x1 y1 x2 y2 x3 y3 curveto } ifelse   gsave 1.13791
SLW 0.8 0 0.2  setrgbcolor  1. .setopacityalpha   3.01129 1 DotLine
 grestore end
 
@endspecial
-568 301 a
tx@Dict begin { 45.23975 -62.48436 } PutCoor PutBegin  end
 -568 301 a Fd(0)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a -568
301 a
tx@Dict begin { 4.83691 -28.91034 } PutCoor PutBegin  end
 -568 301 a Fd(1)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a -568 301
a
tx@Dict begin { 36.1351 14.90668 } PutCoor PutBegin  end
 -568 301 a Fd(2)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a -568 301 a
tx@Dict begin { 95.31686 17.75214 } PutCoor PutBegin  end
 -568
301 a Fd(3)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a -568 301 a
tx@Dict begin { 140.84099 -12.97687 } PutCoor PutBegin  end
 -568 301
a Fd(4)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a -568 301 a
tx@Dict begin { 129.46007 -49.39635 } PutCoor PutBegin  end
 -568 301 a Fd(5)-568
301 y
tx@Dict begin  PutEnd  end
 -568 301 a -568 301 a
tx@Dict begin { 57.18985 30.84059 } PutCoor PutBegin  end
 -568 301 a Fd(6)-568 301
y
tx@Dict begin  PutEnd  end
 -568 301 a -568 301 a
tx@Dict begin { 7.11317 63.2767 } PutCoor PutBegin  end
 -568 301 a Fd(7)-568 301 y
tx@Dict begin  PutEnd  end
 -568
301 a -568 301 a
tx@Dict begin { 49.22311 84.90062 } PutCoor PutBegin  end
 -568 301 a Fd(8)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301
a -568 301 a
tx@Dict begin { 103.85233 82.62436 } PutCoor PutBegin  end
 -568 301 a Fd(9)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a -568
301 a
tx@Dict begin { 145.39352 64.41461 } PutCoor PutBegin  end
 -568 301 a Fd(10)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a -568 301
a
tx@Dict begin { 128.89088 30.84059 } PutCoor PutBegin  end
 -568 301 a Fd(11)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a -568 301 a
tx@Dict begin { 12.23447 -86.66937 } PutCoor PutBegin  end
 -568
301 a -24 x Fc(P)-503 247 y Fa(T)-515 298 y Fb(0)-428
277 y Fd(=)c Fc(\013)-287 289 y Fa(c)-253 277 y Fc(N)-186
289 y Fa(c)-134 277 y Fd(+)18 b Fc(\014)-4 289 y Fa(f)7
b Fb(0)72 277 y Fc(N)139 289 y Fa(f)g Fb(0)233 277 y
Fd(+)18 b Fc(N)383 289 y Fb(0)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a -568
301 a
tx@Dict begin { 46.09329 -12.40768 } PutCoor PutBegin  end
 -568 301 a 0.6 0.6 0.6 TeXcolorrgb -16 x Fc(f)-527
297 y Fb(0)p 0 TeXcolorgray -568 301 a
tx@Dict begin  PutEnd  end
 -568 301 a -568
301 a
tx@Dict begin { 80.23694 55.30997 } PutCoor PutBegin  end
 -568 301 a 0.6 0.6 0.6 TeXcolorrgb -16 x Fc(f)-527
297 y Fb(1)p 0 TeXcolorgray -568 301 a
tx@Dict begin  PutEnd  end
 -568 301 a -568
301 a
tx@Dict begin { 9.38945 -39.43771 } PutCoor PutBegin  end
 -568 301 a 0.6 0.6 0.6 TeXcolorrgb -16 x Fc(f)-527
297 y Fb(2)p 0 TeXcolorgray -568 301 a
tx@Dict begin  PutEnd  end
 -568 301 a -568
301 a
tx@Dict begin { 0.0 24.29614 } PutCoor PutBegin  end
 -568 301 a 0.6 0.6 0.6 TeXcolorrgb -16 x Fc(f)-527
297 y Fb(3)p 0 TeXcolorgray -568 301 a
tx@Dict begin  PutEnd  end
 -568 301 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.13791
SLW 0 0.8 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
40.11847 -22.36632 23.04665 -20.65923 18.7789 -27.20325 15.36429 -32.60933
  false /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
BezierNArray n 1 eq { pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n 4 sub
3 idiv { 6 2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos} {ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi
}{ 1. } ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def
/t GetArrowPos def /t0 t 0.95 mul def getValues ArrowInside pop pop
pop pop } repeat x1 y1 x2 y2 x3 y3 curveto } ifelse   gsave 1.13791
SLW 0 0.8 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -568 301 a
tx@Dict begin { 82.51277 96.85072 } PutCoor PutBegin  end
 -568 301 a 0.6 0.6 0.6
TeXcolorrgb -16 x Fc(f)-527 297 y Fb(4)p 0 TeXcolorgray
-568 301 a
tx@Dict begin  PutEnd  end
 -568 301 a -568 301 a
tx@Dict begin { 129.46007 75.22679 } PutCoor PutBegin  end
 -568 301 a 0.6 0.6 0.6
TeXcolorrgb -16 x Fc(f)-527 297 y Fb(5)p 0 TeXcolorgray
-568 301 a
tx@Dict begin  PutEnd  end
 -568 301 a -568 301 a
tx@Dict begin { 148.23898 20.31277 } PutCoor PutBegin  end
 -568 301 a 0.6 0.6 0.6
TeXcolorrgb -16 x Fc(f)-527 297 y Fb(6)p 0 TeXcolorgray
-568 301 a
tx@Dict begin  PutEnd  end
 -568 301 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.13791
SLW 0 0.8 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
139.83028 7.49696 147.5643 7.79219 155.59442 14.93707 149.53406 19.18701
  false /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
BezierNArray n 1 eq { pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n 4 sub
3 idiv { 6 2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos} {ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi
}{ 1. } ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def
/t GetArrowPos def /t0 t 0.95 mul def getValues ArrowInside pop pop
pop pop } repeat x1 y1 x2 y2 x3 y3 curveto } ifelse   gsave 1.13791
SLW 0 0.8 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
-568 301 a
tx@Dict begin { 95.03206 -61.34645 } PutCoor PutBegin  end
 -568 301 a 0.6 0.6 0.6 TeXcolorrgb -16 x Fc(f)-527
297 y Fb(7)p 0 TeXcolorgray -568 301 a
tx@Dict begin  PutEnd  end
 -568 301 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.13791
SLW 0 0.8 0.2  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
83.79396 -41.97404 86.72363 -51.48116 90.18863 -54.12386 96.02713 -54.82675
  false /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
BezierNArray n 1 eq { pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n 4 sub
3 idiv { 6 2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos} {ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi
}{ 1. } ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def
/t GetArrowPos def /t0 t 0.95 mul def getValues ArrowInside pop pop
pop pop } repeat x1 y1 x2 y2 x3 y3 curveto } ifelse   gsave 1.13791
SLW 0 0.8 0.2  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0
 setlinecap stroke  grestore end
 
@endspecial -568 301 a
tx@Dict begin { 167.871 -29.4795 } PutCoor PutBegin  end
 -568 301 a Fd(1)-568
301 y
tx@Dict begin  PutEnd  end
 -568 301 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56917
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
102.14523 -40.57607 121.7777 -59.63934 148.23898 -45.41298 164.74118
-62.48436   false /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse
def BezierNArray n 1 eq { pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n
4 sub 3 idiv { 6 2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll
ArrowB /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul
def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1
sub 3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub
cy sub by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add
cx t0 mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul
add y0 add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay
t 3 exp mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos} {ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi
}{ 1. } ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def
/t GetArrowPos def /t0 t 0.95 mul def getValues ArrowInside pop pop
pop pop } repeat x1 y1 x2 y2 x3 y3 curveto } ifelse   gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
-568 301 a
tx@Dict begin { 192.34038 -86.66937 } PutCoor PutBegin  end
 -568 301 a -24 x Fc(P)-503 247 y Fa(T)-515
298 y Fb(1)-428 277 y Fd(=)23 b Fc(\013)-287 289 y Fa(c)-253
277 y Fc(N)-186 289 y Fa(c)-134 277 y Fd(+)18 b Fc(\014)-4
289 y Fa(f)7 b Fb(0)72 277 y Fc(N)139 289 y Fa(f)g Fb(0)-568
301 y
tx@Dict begin  PutEnd  end
 -568 301 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.13791
SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
392.64793 39.94524 386.77252 66.4634 391.83911 83.53477 365.04874 92.86736
  false /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
BezierNArray n 1 eq { pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n 4 sub
3 idiv { 6 2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos} {ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi
}{ 1. } ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def
/t GetArrowPos def /t0 t 0.95 mul def getValues ArrowInside pop pop
pop pop } repeat x1 y1 x2 y2 x3 y3 curveto } ifelse   gsave 1.13791
SLW 0 0 1  setrgbcolor  1. .setopacityalpha   3.01129 1 DotLine  grestore
end
 
@endspecial
-568 301 a
tx@Dict begin { 364.76437 97.4199 } PutCoor PutBegin  end
 -568 301 a Fd(8)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a -568
301 a
tx@Dict begin { 373.86902 -86.385 } PutCoor PutBegin  end
 -568 301 a -21 x Fc(P)-503 250 y Fa(T)-515 301
y Fb(8)-428 280 y Fd(=)23 b Fc(\013)-287 292 y Fa(c)-253
280 y Fc(N)-186 292 y Fa(c)-568 301 y
tx@Dict begin  PutEnd  end
 -568 301 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.13791
SLW 0 0.8 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
21.02522 38.37186 8.56456 51.8554 5.2259 41.33844 5.15123 35.25897
  false /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
BezierNArray n 1 eq { pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n 4 sub
3 idiv { 6 2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB
/y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy
y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3
mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub
by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add cx t0
mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul add y0
add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay t 3 exp
mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos} {ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi
}{ 1. } ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def
/t GetArrowPos def /t0 t 0.95 mul def getValues ArrowInside pop pop
pop pop } repeat x1 y1 x2 y2 x3 y3 curveto } ifelse   gsave 1.13791
SLW 0 0.8 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -595 1178 a
tx@Dict begin  CP CP translate 1 1.0 div 1 1.0 div scale NET  end
 -595 1178 a 0 TeXcolorgray
0 TeXcolorgray eop end

userdict /end-hook known{end-hook}if
%%Trailer
cleartomark countdictstack exch sub { end } repeat restore
%%EOF
